name: GA Security Controls (Pass/Warn/Block)

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:
    inputs:
      enforcement:
        description: "pass | warn | block"
        required: false
        default: "warn"
        type: choice
        options: [ "pass", "warn", "block" ]

permissions:
  contents: read
  packages: read
  security-events: read
  id-token: write     # for OIDC + attestations
  attestations: write

env:
  # Безопасный дефолт для событий без inputs (push/PR)
  ENFORCEMENT: ${{ inputs.enforcement || 'warn' }}

concurrency:
  group: sec-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_and_attest:
    name: Build + SBOM + Attest + Verify
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Ensure jq present (fallback)
        run: |
          command -v jq >/dev/null 2>&1 || (sudo apt-get update && sudo apt-get install -y jq)

      - name: Build demo artifact
        run: |
          echo "hello $(date -u +%FT%TZ)" > artifact.txt
          sha256sum artifact.txt | tee checksums.txt

      - name: Export SBOM (SPDX) for current commit
        # Требует: Settings → Code security → Dependency graph + Automatic dependency submission = ON
        run: |
          set -euo pipefail
          # Тянем SBOM через API; поле .sbom может прийти строкой — разбираем в объект
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            repos/${{ github.repository }}/dependency-graph/sbom \
            -f ref=${{ github.sha }} \
          | jq '.sbom | (if type=="string" then fromjson else . end)' > sbom.spdx.json

          # sanity-check: должно вывести что-то вроде "SPDX-2.3"
          jq -e -r '.spdxVersion' sbom.spdx.json
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifact (for record)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: demo-artifact
          path: |
            artifact.txt
            checksums.txt
            sbom.spdx.json

      - name: Attest build provenance (SLSA)
        uses: actions/attest-build-provenance@ef244123eb79f2f7a7e75d99086184180e6d0018
        with:
          subject-path: artifact.txt

      - name: Attest SBOM (bind to subject digest)
        uses: actions/attest-sbom@5026d3663739160db546203eeaffa6aa1c51a4d6
        with:
          subject-path: artifact.txt
          sbom-path: sbom.spdx.json

      - name: Verify attestations before "promote/deploy"
        # BLOCK => fail, WARN/PASS => предупреждение
        shell: bash
        run: |
          set -e
          if ! gh attestation verify --subject-path artifact.txt ; then
            if [ "${ENFORCEMENT}" = "block" ]; then
              echo "Attestation verify FAILED ⇒ BLOCK"
              exit 1
            else
              echo "::warning::Attestation verify failed ⇒ WARN mode"
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  dependency_review:
    name: SCA gate (Dependency Review)
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Dependency review (fail on CRITICAL)
        uses: actions/dependency-review-action@595b5aeba73380359d98a5e087f648dbb0edce1b
        with:
          fail-on-severity: critical
        continue-on-error: ${{ env.ENFORCEMENT != 'block' }}

  secret_scanning_presence:
    name: Secret scanning (presence & push protection)
    runs-on: ubuntu-latest
    steps:
      - name: Check repo security_and_analysis flags
        shell: bash
        run: |
          set -e
          DATA=$(gh api repos/${{ github.repository }})
          SEC=$(echo "$DATA" | jq -r '.security_and_analysis')
          SS=$(echo "$SEC" | jq -r '.secret_scanning.status')
          PP=$(echo "$SEC" | jq -r '.secret_scanning_push_protection.status')
          GHAS=$(echo "$SEC" | jq -r '.advanced_security.status')
          echo "Secret scanning: $SS, Push protection: $PP, GHAS: $GHAS"
          if [ "$SS" != "enabled" ] || [ "$PP" != "enabled" ]; then
            if [ "${ENFORCEMENT}" = "block" ]; then
              echo "Secret scanning/Push protection not fully enabled ⇒ BLOCK"
              exit 1
            else
              echo "::warning::Enable Secret scanning + Push protection in Settings → Security & analysis"
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  promote_to_prod:
    name: Promote → production (requires env approval)
    needs: [ build_and_attest, secret_scanning_presence ]
    if: ${{ always() && (github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main') }}
    runs-on: ubuntu-latest
    environment:
      name: production   # в UI включи Required reviewers (и запрет self-approval)
    steps:
      - name: Gate summary
        run: |
          echo "ENFORCEMENT=${ENFORCEMENT}"
          echo "All upstream gates completed. This job requires environment approval in GitHub UI."
