name: Security Framework Gates

on:
  push:
    branches: [ "main", "release/*" ]
  pull_request:
    branches: [ "main", "release/*" ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  packages: read
  id-token: write
  attestations: write

env:
  ENFORCEMENT: ${{ github.ref_name == github.event.repository.default_branch && 'block' || 'warn' }}

jobs:
  # --- Static & Dependency Analysis ---
  codeql:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - uses: github/codeql-action/init@192325c86100d080feab897ff886c34abd4c83a3
        with:
          languages: python, actions
          build-mode: none
      - uses: github/codeql-action/analyze@192325c86100d080feab897ff886c34abd4c83a3

  dependency_review:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'merge_group' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - uses: actions/dependency-review-action@595b5aeba73380359d98a5e087f648dbb0edce1b
        with:
          fail-on-severity: critical
        continue-on-error: ${{ env.ENFORCEMENT != 'block' }}

  # --- Build + SBOM + Attestation ---
  build_and_attest:
    needs: [ codeql, dependency_review ]
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Build artifact
        run: |
          echo "hello $(date -u +%FT%TZ)" > artifact.txt
          sha256sum artifact.txt | tee checksums.txt

      - name: Export SBOM (GitHub API or Syft)
        id: sbom
        run: |
          set -euo pipefail
          gh api repos/${{ github.repository }}/dependency-graph/sbom -f ref=${{ github.sha }} \
            | jq '.sbom | fromjson' > sbom.spdx.json || \
          (curl -sSfL https://get.anchore.io/syft | sh -s -- -b /usr/local/bin && \
           syft dir:. -o spdx-json=sbom.spdx.json)

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: build
          path: |
            artifact.txt
            checksums.txt
            sbom.spdx.json

      - name: Attest provenance
        if: github.event_name == 'push'
        uses: actions/attest-build-provenance@ef244123eb79f2f7a7e75d99086184180e6d0018
        with:
          subject-path: artifact.txt

      - name: Attest SBOM
        if: github.event_name == 'push'
        uses: actions/attest-sbom@5026d3663739160db546203eeaffa6aa1c51a4d6
        with:
          subject-path: artifact.txt
          sbom-path: sbom.spdx.json

      - name: Verify attestations
        if: github.event_name == 'push'
        run: |
          set -euo pipefail
          WF_NOREF="${GITHUB_WORKFLOW_REF%@*}"
          for i in $(seq 1 6); do
            if gh attestation verify \
                  --repo "${{ github.repository }}" \
                  --subject-path artifact.txt \
                  --predicate-type "https://slsa.dev/provenance/v1" \
                  --signer-workflow "$WF_NOREF" \
                  --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
                  --deny-self-hosted-runners \
                  --limit 50 ; then
              echo "✓ Attestation verified"
              exit 0
            fi
            sleep 10
          done
          if [ "${ENFORCEMENT}" = "block" ]; then
            exit 1
          else
            echo "::warning::Attestation verification failed"
          fi

  # --- Trust-store guard (JWKS) ---
  trust_store_guard:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Validate JWKS exists and matches AWS_KMS_KEY_ID
        env:
          AWS_KMS_KEY_ID: ${{ vars.AWS_KMS_KEY_ID }}
        run: |
          set -euo pipefail
          test -f .github/trust/publishers.jwks.json || { echo "JWKS missing"; exit 1; }
          jq -e '.keys|length>0' .github/trust/publishers.jwks.json >/dev/null
          if [ -n "${AWS_KMS_KEY_ID:-}" ]; then
            KID_EXPECT="AWS:${AWS_KMS_KEY_ID}"
            if ! jq -r '.keys[].kid' .github/trust/publishers.jwks.json | grep -Fx "$KID_EXPECT" >/dev/null; then
              echo "::warning::JWKS kid mismatch (expected $KID_EXPECT)"
              [ "${ENFORCEMENT}" = "block" ] && exit 1 || true
            fi
          fi

  # --- Secrets / Repo Security Flags ---
  security_settings_guard:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - run: |
          DATA=$(gh api repos/${{ github.repository }})
          SEC=$(echo "$DATA" | jq -r '.security_and_analysis')
          SS=$(echo "$SEC" | jq -r '.secret_scanning.status')
          PP=$(echo "$SEC" | jq -r '.secret_scanning_push_protection.status')
          echo "Secret scanning: $SS, Push protection: $PP"
          if [ "$SS" != "enabled" ] || [ "$PP" != "enabled" ]; then
            if [ "${ENFORCEMENT}" = "block" ]; then
              exit 1
            else
              echo "::warning::Enable Secret scanning + Push protection"
            fi
          fi

  # --- KMS sign + verify (OIDC→AWS) ---
  kms_sign_and_verify:
    needs: [ build_and_attest, trust_store_guard ]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Download build artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: build

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: KMS Sign artifact.txt (PS256)
        id: kmssign
        run: |
          set -euo pipefail
          aws kms sign \
            --key-id "${{ vars.AWS_KMS_KEY_ID }}" \
            --signing-algorithm RSASSA_PSS_SHA_256 \
            --message-type RAW \
            --message fileb://artifact.txt \
            --query Signature \
            --output text | base64 -d > artifact.sig

      - name: Fetch public key and verify with OpenSSL
        run: |
          set -euo pipefail
          aws kms get-public-key --key-id "${{ vars.AWS_KMS_KEY_ID }}" \
            --query PublicKey --output text | base64 -d > aws-pub.der
          openssl pkey -pubin -inform DER -in aws-pub.der -out aws-pub.pem
          openssl pkeyutl -verify -pubin -inkey aws-pub.pem \
            -pkeyopt digest:sha256 -pkeyopt rsa_padding_mode:pss \
            -in artifact.txt -sigfile artifact.sig

  # --- Promote to Production ---
  promote_to_prod:
    needs: [ build_and_attest, security_settings_guard, kms_sign_and_verify ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: production
    concurrency:
      group: deploy-${{ github.ref_name }}
      cancel-in-progress: true
    steps:
      - run: |
          echo "All upstream gates passed. Waiting for env approval…"
