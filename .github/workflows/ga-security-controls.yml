# =========================================================================================
# Security Framework Gates — аннотированный пайплайн
# Легенда к меткам:
#   Критерий: одна цифра в начале (1..10)
#   Метрика: ⬜ = M1, ⚪ = M2
#   Уровни:  🟩 L1, 🟦 L2, 🟪 L3
#   Код: C.DOMAIN.Mx.Ly.TAG, напр. 1.ART.M1.L1.SIGN
# =========================================================================================

name: Security Framework Gates  # [6.PIPE.M1.L1] Имя пайплайна для аудита (governance presence)

on:
  push:                         # [6.PIPE.M1.L1] Триггер на все ветки
    branches: ['**']
  pull_request:                 # [4.EXEC.M1.L1] PR-ветки (форки без секретов)
    branches: ['**']
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:            # [6.PIPE.M1.L1] Ручной запуск

permissions:                    # [5.ACCESS.M1.L1] Минимальные права токена
  contents: read
  security-events: write
  packages: read
  id-token: write               # [5.ACCESS.M1.L3] OIDC для краткоживущих creds
  attestations: write           # [1.ART.M2.L1] Публикация attestations

env:
  # Политика: default branch ⇒ block, иначе warn
  ENFORCEMENT: ${{ github.ref_name == github.event.repository.default_branch && 'block' || 'warn' }}

jobs:

  # -----------------------------------------------------------------------------
  # Общий хелпер логов (копируется в каждый job)
  # -----------------------------------------------------------------------------

  # -----------------------------------------------------------------------------
  # 9.TEST.M1 — SAST (CodeQL) presence
  # -----------------------------------------------------------------------------
  codeql:
    runs-on: ubuntu-latest
    steps:
      - name: Setup audit helper
        shell: bash
        run: |
          set -euo pipefail
          echo 'GREEN=\033[32m'   >> $GITHUB_ENV
          echo 'RED=\033[31m'     >> $GITHUB_ENV
          echo 'BLUE=\033[34m'    >> $GITHUB_ENV
          echo 'MAGENTA=\033[35m' >> $GITHUB_ENV
          echo 'RESET=\033[0m'    >> $GITHUB_ENV
          echo "AUDIT=$RUNNER_TEMP/audit.json" >> $GITHUB_ENV
          printf '{"job":"codeql","items":[]}\n' > "$RUNNER_TEMP/audit.json"
          cat > /usr/local/bin/audit_log <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          LEVEL="$1"; STATUS="$2"; CODE="$3"; TITLE="$4"; EVID="${5:-}"; EXTRA="${6:-}"
          case "$LEVEL" in L1) ICON="🟩"; CLR="${GREEN:-}";; L2) ICON="🟦"; CLR="${BLUE:-}";; L3) ICON="🟪"; CLR="${MAGENTA:-}";; *) ICON="▫️"; CLR="";; esac
          [ "$STATUS" = "FAILED" ] && CLR="${RED:-}"
          echo "::group::${ICON} ${CODE} — ${TITLE}"
          [ -n "$CLR" ] && printf "${CLR}%s [%s] %s — %s${RESET}\n" "$ICON" "$STATUS" "$CODE" "$TITLE" || printf "%s [%s] %s — %s\n" "$ICON" "$STATUS" "$CODE" "$TITLE"
          [ -n "$EVID" ] && { echo "EVIDENCE:"; printf "%s\n" "$EVID"; }
          [ -n "$EXTRA" ] && { echo "NOTE: $EXTRA"; }
          echo "::endgroup::"
          TMP=$(mktemp)
          jq --arg level "$LEVEL" --arg status "$STATUS" --arg code "$CODE" --arg title "$TITLE" --arg evid "$EVID" --arg extra "$EXTRA" \
             '.items += [{level:$level,status:$status,code:$code,title:$title,evidence:$evid,extra:$extra}]' "$AUDIT" > "$TMP"
          mv "$TMP" "$AUDIT"
          EOS
          chmod +x /usr/local/bin/audit_log

      # [9.TEST.M1.L1.RUN-TOOLS] ⬜ SAST presence — CodeQL init/analyze
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Initialize CodeQL
        uses: github/codeql-action/init@192325c86100d080feab897ff886c34abd4c83a3
        with:
          languages: python, actions
          build-mode: none

      - name: Analyze CodeQL
        uses: github/codeql-action/analyze@192325c86100d080feab897ff886c34abd4c83a3

      - name: Log 9.TEST.M1.L1.RUN-TOOLS
        if: always()
        shell: bash
        run: |
          audit_log L1 $([ "${{ job.status }}" = "success" ] && echo PASSED || echo WARN) \
            9.TEST.M1.L1.RUN-TOOLS "⬜ SAST (CodeQL) запущен" \
            "SARIF загружен в Security → Code scanning alerts"

      - name: Upload audit for this job
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: audit-codeql
          path: ${{ env.AUDIT }}

  # -----------------------------------------------------------------------------
  # 2.DEPS.M2 — Dependency Review (SCA presence, pin/lock baseline)
  # -----------------------------------------------------------------------------
  dependency_review:
    runs-on: ubuntu-latest
    steps:
      - name: Setup audit helper
        shell: bash
        run: |
          set -euo pipefail
          echo 'GREEN=\033[32m'   >> $GITHUB_ENV
          echo 'RED=\033[31m'     >> $GITHUB_ENV
          echo 'BLUE=\033[34m'    >> $GITHUB_ENV
          echo 'MAGENTA=\033[35m' >> $GITHUB_ENV
          echo 'RESET=\033[0m'    >> $GITHUB_ENV
          echo "AUDIT=$RUNNER_TEMP/audit.json" >> $GITHUB_ENV
          printf '{"job":"dependency_review","items":[]}\n' > "$RUNNER_TEMP/audit.json"
          cat > /usr/local/bin/audit_log <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          LEVEL="$1"; STATUS="$2"; CODE="$3"; TITLE="$4"; EVID="${5:-}"; EXTRA="${6:-}"
          case "$LEVEL" in L1) ICON="🟩"; CLR="${GREEN:-}";; L2) ICON="🟦"; CLR="${BLUE:-}";; L3) ICON="🟪"; CLR="${MAGENTA:-}";; *) ICON="▫️"; CLR="";; esac
          [ "$STATUS" = "FAILED" ] && CLR="${RED:-}"
          echo "::group::${ICON} ${CODE} — ${TITLE}"
          [ -n "$CLR" ] && printf "${CLR}%s [%s] %s — %s${RESET}\n" "$ICON" "$STATUS" "$CODE" "$TITLE" || printf "%s [%s] %s — %s\n" "$ICON" "$STATUS" "$CODE" "$TITLE"
          [ -n "$EVID" ] && { echo "EVIDENCE:"; printf "%s\n" "$EVID"; }
          [ -n "$EXTRA" ] && { echo "NOTE: $EXTRA"; }
          echo "::endgroup::"
          TMP=$(mktemp)
          jq --arg level "$LEVEL" --arg status "$STATUS" --arg code "$CODE" --arg title "$TITLE" --arg evid "$EVID" --arg extra "$EXTRA" \
             '.items += [{level:$level,status:$status,code:$code,title:$title,evidence:$evid,extra:$extra}]' "$AUDIT" > "$TMP"
          mv "$TMP" "$AUDIT"
          EOS
          chmod +x /usr/local/bin/audit_log

      # [2.DEPS.M2.L1.PIN-LOCK] ⬜ SCA presence: dependency review
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Compute base/head refs
        id: deprefs
        shell: bash
        run: |
          set -euo pipefail
          HEAD_SHA="${GITHUB_SHA}"
          if [ "${GITHUB_EVENT_NAME}" = "push" ]; then
            BEFORE="$(jq -r .before "$GITHUB_EVENT_PATH")"
            if [ -n "$BEFORE" ] && [ "$BEFORE" != "0000000000000000000000000000000000000000" ]; then
              BASE_SHA="$BEFORE"
            else
              git fetch --no-tags --prune --depth=2 origin "${GITHUB_REF}"
              BASE_SHA="$(git rev-parse "${HEAD_SHA}^" 2>/dev/null || echo "")"
            fi
          else
            BASE_SHA="$(jq -r .pull_request.base.sha "$GITHUB_EVENT_PATH")"
          fi
          echo "base=$BASE_SHA" >> "$GITHUB_OUTPUT"
          echo "head=$HEAD_SHA" >> "$GITHUB_OUTPUT"
          echo "skip=$([ -z "$BASE_SHA" ] && echo true || echo false)" >> "$GITHUB_OUTPUT"

      - name: Dependency Review (fail on critical)
        if: steps.deprefs.outputs.skip != 'true'
        uses: actions/dependency-review-action@595b5aeba73380359d98a5e087f648dbb0edce1b
        with:
          base-ref: ${{ steps.deprefs.outputs.base }}
          head-ref: ${{ steps.deprefs.outputs.head }}
          fail-on-severity: critical
        continue-on-error: ${{ env.ENFORCEMENT != 'block' }}

      - name: Log 2.DEPS.M2.L1.PIN-LOCK
        if: always()
        shell: bash
        run: |
          audit_log L1 $([ "${{ job.status }}" = "success" ] && echo PASSED || echo WARN) \
            2.DEPS.M2.L1.PIN-LOCK "⬜ SCA (dependency-review) запущен" \
            "Отчёт см. в логах шага и PR annotations"

      - name: Upload audit for this job
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: audit-dependency_review
          path: ${{ env.AUDIT }}

  # -----------------------------------------------------------------------------
  # 8.THIRD.M1 / 2.DEPS.M1 — Verify action publishers & pin to SHA
  # -----------------------------------------------------------------------------
  verify_action_publishers:
    runs-on: ubuntu-latest
    steps:
      - name: Setup audit helper
        shell: bash
        run: |
          set -euo pipefail
          echo 'GREEN=\033[32m'   >> $GITHUB_ENV
          echo 'RED=\033[31m'     >> $GITHUB_ENV
          echo 'BLUE=\033[34m'    >> $GITHUB_ENV
          echo 'MAGENTA=\033[35m' >> $GITHUB_ENV
          echo 'RESET=\033[0m'    >> $GITHUB_ENV
          echo "AUDIT=$RUNNER_TEMP/audit.json" >> $GITHUB_ENV
          printf '{"job":"verify_action_publishers","items":[]}\n' > "$RUNNER_TEMP/audit.json"
          cat > /usr/local/bin/audit_log <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          LEVEL="$1"; STATUS="$2"; CODE="$3"; TITLE="$4"; EVID="${5:-}"; EXTRA="${6:-}"
          case "$LEVEL" in L1) ICON="🟩"; CLR="${GREEN:-}";; L2) ICON="🟦"; CLR="${BLUE:-}";; L3) ICON="🟪"; CLR="${MAGENTA:-}";; *) ICON="▫️"; CLR="";; esac
          [ "$STATUS" = "FAILED" ] && CLR="${RED:-}"
          echo "::group::${ICON} ${CODE} — ${TITLE}"
          [ -n "$CLR" ] && printf "${CLR}%s [%s] %s — %s${RESET}\n" "$ICON" "$STATUS" "$CODE" "$TITLE" || printf "%s [%s] %s — %s\n" "$ICON" "$STATUS" "$CODE" "$TITLE"
          [ -n "$EVID" ] && { echo "EVIDENCE:"; printf "%s\n" "$EVID"; }
          [ -n "$EXTRA" ] && { echo "NOTE: $EXTRA"; }
          echo "::endgroup::"
          TMP=$(mktemp)
          jq --arg level "$LEVEL" --arg status "$STATUS" --arg code "$CODE" --arg title "$TITLE" --arg evid "$EVID" --arg extra "$EXTRA" \
             '.items += [{level:$level,status:$status,code:$code,title:$title,evidence:$evid,extra:$extra}]' "$AUDIT" > "$TMP"
          mv "$TMP" "$AUDIT"
          EOS
          chmod +x /usr/local/bin/audit_log

      # [8.THIRD.M1.L1.ALLOWLIST-PIN] ⬜ Только allow-list + pinned to SHA
      # [2.DEPS.M1.L1.ALLOWLIST]     ⬜ Доверенные источники actions/*
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Install yq
        shell: bash
        run: |
          set -euo pipefail
          sudo curl -sSL -o /usr/local/bin/yq \
            https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Verify action publishers and pins
        env:
          GH_TOKEN: ${{ github.token }}
          ALLOW_OWNERS: actions,github,dependabot,aws-actions,google-github-actions,azure
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t FILES < <(git ls-files '.github/workflows/*.yml' '.github/workflows/*.yaml' 2>/dev/null || true)
          [ ${#FILES[@]} -eq 0 ] && { echo "No workflow files"; exit 0; }
          status=0
          IFS=',' read -r -a ALLOWED <<< "${ALLOW_OWNERS}"
          is_allowed(){ local o="$1"; for a in "${ALLOWED[@]}"; do [ "$o" = "$a" ] && return 0; done; return 1; }
          for f in "${FILES[@]}"; do
            while read -r owner repo ref; do
              [ -z "$owner" ] && continue
              if ! is_allowed "$owner"; then
                echo "::warning file=$f::Owner '$owner' не в allow-list (${ALLOW_OWNERS})"; status=1; fi
              if ! [[ "$ref" =~ ^[0-9a-f]{40}$ ]]; then
                echo "::warning file=$f::'$owner/$repo@$ref' не закреплён на полный commit SHA"; status=1; fi
              data=$(gh api "repos/$owner/$repo" -H "Accept: application/vnd.github+json" || true)
              verified=$(jq -r 'try .owner.is_verified // false' <<<"$data")
              if [ "$verified" != "true" ] && ! is_allowed "$owner"; then
                echo "::warning file=$f::Издатель '$owner' не verified"; status=1; fi
            done < <(yq -r '.. | .uses? | select(type=="string")' "$f" | awk -F'[@/]' '{ if (NF>=3) printf "%s %s %s\n",$1,$2,$NF }')
          done
          if [ $status -ne 0 ] && [ "${ENFORCEMENT}" = "block" ]; then
            echo "::error::Проверка издателей/пиннинга не прошла (ENFORCEMENT=block)."; exit 1
          fi

      - name: Log 8.THIRD.M1.L1.ALLOWLIST-PIN & 2.DEPS.M1.L1.ALLOWLIST
        if: always()
        shell: bash
        run: |
          audit_log L1 $([ "${{ job.status }}" = "success" ] && echo PASSED || echo WARN) \
            8.THIRD.M1.L1.ALLOWLIST-PIN "⬜ Third-party allow-list + pinned SHA" \
            "Проверены uses: owner из allow-list, pin=full SHA"
          audit_log L1 $([ "${{ job.status }}" = "success" ] && echo PASSED || echo WARN) \
            2.DEPS.M1.L1.ALLOWLIST "⬜ Доверие к издателям (actions allow-list)" \
            "owners ок + pins ок; см. предупреждения выше если были"

      - name: Upload audit for this job
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: audit-verify_action_publishers
          path: ${{ env.AUDIT }}

  # -----------------------------------------------------------------------------
  # 1.ART — Build + SBOM + Attest + Verify
  # -----------------------------------------------------------------------------
  build_and_attest:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Setup audit helper
        shell: bash
        run: |
          set -euo pipefail
          echo 'GREEN=\033[32m'   >> $GITHUB_ENV
          echo 'RED=\033[31m'     >> $GITHUB_ENV
          echo 'BLUE=\033[34m'    >> $GITHUB_ENV
          echo 'MAGENTA=\033[35m' >> $GITHUB_ENV
          echo 'RESET=\033[0m'    >> $GITHUB_ENV
          echo "AUDIT=$RUNNER_TEMP/audit.json" >> $GITHUB_ENV
          printf '{"job":"build_and_attest","items":[]}\n' > "$RUNNER_TEMP/audit.json"
          cat > /usr/local/bin/audit_log <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          LEVEL="$1"; STATUS="$2"; CODE="$3"; TITLE="$4"; EVID="${5:-}"; EXTRA="${6:-}"
          case "$LEVEL" in L1) ICON="🟩"; CLR="${GREEN:-}";; L2) ICON="🟦"; CLR="${BLUE:-}";; L3) ICON="🟪"; CLR="${MAGENTA:-}";; *) ICON="▫️"; CLR="";; esac
          [ "$STATUS" = "FAILED" ] && CLR="${RED:-}"
          echo "::group::${ICON} ${CODE} — ${TITLE}"
          [ -n "$CLR" ] && printf "${CLR}%s [%s] %s — %s${RESET}\n" "$ICON" "$STATUS" "$CODE" "$TITLE" || printf "%s [%s] %s — %s\n" "$ICON" "$STATUS" "$CODE" "$TITLE"
          [ -n "$EVID" ] && { echo "EVIDENCE:"; printf "%s\n" "$EVID"; }
          [ -n "$EXTRA" ] && { echo "NOTE: $EXTRA"; }
          echo "::endgroup::"
          TMP=$(mktemp)
          jq --arg level "$LEVEL" --arg status "$STATUS" --arg code "$CODE" --arg title "$TITLE" --arg evid "$EVID" --arg extra "$EXTRA" \
             '.items += [{level:$level,status:$status,code:$code,title:$title,evidence:$evid,extra:$extra}]' "$AUDIT" > "$TMP"
          mv "$TMP" "$AUDIT"
          EOS
          chmod +x /usr/local/bin/audit_log

      # [1.ART.M1.L1.SIGN] ⬜ Подписываем артефакт (аттестацией)
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Build artifact
        shell: bash
        run: |
          set -euo pipefail
          echo "hello $(date -u +%FT%TZ)" > artifact.txt
          sha256sum artifact.txt | tee checksums.txt

      # [2.DEPS.M2.L2.SBOM-ATTEST] ⚪ Генерация SBOM и привязка к digest
      - name: Export SBOM (Syft) for artifact.txt
        id: sbom
        shell: bash
        run: |
          set -euo pipefail
          ART_DIGEST="$(sha256sum artifact.txt | awk '{print $1}')"
          VER="v1.33.0"
          URL1="https://github.com/anchore/syft/releases/download/${VER}/syft_${VER#v}_linux_amd64.tar.gz"
          URL2="https://github.com/anchore/syft/releases/download/${VER}/syft_Linux_x86_64.tar.gz"
          curl -fsSL "$URL1" -o syft.tgz || curl -fsSL "$URL2" -o syft.tgz
          tar -xzf syft.tgz syft && sudo install -m0755 syft /usr/local/bin/syft
          syft "file:artifact.txt" -o spdx-json=sbom.spdx.json
          tmp=$(mktemp)
          jq --arg d "$ART_DIGEST" '
            .files = (
              ((.files // []) | map(select(.fileName != "artifact.txt")))
              + [{ "fileName":"artifact.txt","SPDXID":"SPDXRef-File-artifact.txt",
                   "checksums":[{"algorithm":"SHA256","checksumValue":$d}] }]
          )' sbom.spdx.json > "$tmp"
          mv "$tmp" sbom.spdx.json

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: build
          path: |
            artifact.txt
            checksums.txt
            sbom.spdx.json

      # [1.ART.M2.L1.ATTEST] ⚪ Минимальная attestation: provenance
      - name: Attest provenance (always try)
        uses: actions/attest-build-provenance@ef244123eb79f2f7a7e75d99086184180e6d0018
        with:
          subject-path: artifact.txt
        continue-on-error: ${{ github.event_name != 'push' && env.ENFORCEMENT != 'block' }}

      # [2.DEPS.M2.L2.SBOM-ATTEST] ⚪ Аттестация SBOM
      - name: Attest SBOM (always try)
        uses: actions/attest-sbom@5026d3663739160db546203eeaffa6aa1c51a4d6
        with:
          subject-path: artifact.txt
          sbom-path: sbom.spdx.json
        continue-on-error: ${{ github.event_name != 'push' && env.ENFORCEMENT != 'block' }}

      # [1.ART.M1.L1.VERIFY] ⬜ Verify attestations перед Promote/Deploy
      - name: Verify attestations
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        continue-on-error: ${{ github.event_name != 'push' && env.ENFORCEMENT != 'block' }}
        run: |
          set -euo pipefail
          WF_NOREF="${GITHUB_WORKFLOW_REF%@*}"
          ok=1
          for i in $(seq 1 6); do
            if gh attestation verify artifact.txt \
                 --repo "${{ github.repository }}" \
                 --predicate-type "https://slsa.dev/provenance/v1" \
                 --cert-oidc-issuer "https://token.actions.githubusercontent.com" \
                 --signer-workflow "$WF_NOREF" \
                 --deny-self-hosted-runners \
                 --limit 50 ; then ok=0; break; fi
            sleep 5
          done
          if [ $ok -eq 0 ]; then
            audit_log L1 PASSED 1.ART.M1.L1.VERIFY "⬜ Verify attestations" "✓ Attestation verified"
          else
            audit_log L1 $([ "${ENFORCEMENT}" = "block" ] && echo FAILED || echo WARN) \
              1.ART.M1.L1.VERIFY "⬜ Verify attestations" "verification not ✓; см. логи"
            [ "${ENFORCEMENT}" = "block" ] && exit 1 || true
          fi

      - name: Log 1.ART.M1.L1.SIGN + 1.ART.M2.L1.ATTEST + 2.DEPS.M2.L2.SBOM-ATTEST
        if: always()
        shell: bash
        run: |
          audit_log L1 PASSED 1.ART.M1.L1.SIGN "⬜ Подписываем артефакт (attestation)" \
            "Evidence: запись в Actions → Attestations (artifact.txt)"
          audit_log L1 PASSED 1.ART.M2.L1.ATTEST "⚪ Минимальная attestation (provenance)" \
            "Evidence: attest-build-provenance выполнен"
          audit_log L2 PASSED 2.DEPS.M2.L2.SBOM-ATTEST "⚪ SBOM attested и привязан к digest" \
            "sbom.spdx.json содержит SHA256 для artifact.txt"

      - name: Upload audit for this job
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: audit-build_and_attest
          path: ${{ env.AUDIT }}

  # -----------------------------------------------------------------------------
  # 1.ART.M1 — Trust store / JWKS guard
  # -----------------------------------------------------------------------------
  trust_store_guard:
    runs-on: ubuntu-latest
    steps:
      - name: Setup audit helper
        shell: bash
        run: |
          set -euo pipefail
          echo 'GREEN=\033[32m'   >> $GITHUB_ENV
          echo 'RED=\033[31m'     >> $GITHUB_ENV
          echo 'BLUE=\033[34m'    >> $GITHUB_ENV
          echo 'MAGENTA=\033[35m' >> $GITHUB_ENV
          echo 'RESET=\033[0m'    >> $GITHUB_ENV
          echo "AUDIT=$RUNNER_TEMP/audit.json" >> $GITHUB_ENV
          printf '{"job":"trust_store_guard","items":[]}\n' > "$RUNNER_TEMP/audit.json"
          cat > /usr/local/bin/audit_log <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          LEVEL="$1"; STATUS="$2"; CODE="$3"; TITLE="$4"; EVID="${5:-}"; EXTRA="${6:-}"
          case "$LEVEL" in L1) ICON="🟩"; CLR="${GREEN:-}";; L2) ICON="🟦"; CLR="${BLUE:-}";; L3) ICON="🟪"; CLR="${MAGENTA:-}";; *) ICON="▫️"; CLR="";; esac
          [ "$STATUS" = "FAILED" ] && CLR="${RED:-}"
          echo "::group::${ICON} ${CODE} — ${TITLE}"
          [ -n "$CLR" ] && printf "${CLR}%s [%s] %s — %s${RESET}\n" "$ICON" "$STATUS" "$CODE" "$TITLE" || printf "%s [%s] %s — %s\n" "$ICON" "$STATUS" "$CODE" "$TITLE"
          [ -n "$EVID" ] && { echo "EVIDENCE:"; printf "%s\n" "$EVID"; }
          [ -n "$EXTRA" ] && { echo "NOTE: $EXTRA"; }
          echo "::endgroup::"
          TMP=$(mktemp)
          jq --arg level "$LEVEL" --arg status "$STATUS" --arg code "$CODE" --arg title "$TITLE" --arg evid "$EVID" --arg extra "$EXTRA" \
             '.items += [{level:$level,status:$status,code:$code,title:$title,evidence:$evid,extra:$extra}]' "$AUDIT" > "$TMP"
          mv "$TMP" "$AUDIT"
          EOS
          chmod +x /usr/local/bin/audit_log

      # [1.ART.M1.L1.JWKS-CHECK] ⬜ Проверка JWKS против AWS_KMS_KEY_ID
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Validate JWKS exists and matches AWS_KMS_KEY_ID
        env:
          AWS_KMS_KEY_ID: ${{ vars.AWS_KMS_KEY_ID }}
        shell: bash
        run: |
          set -euo pipefail
          test -f .github/trust/publishers.jwks.json || { echo "JWKS missing"; exit 1; }
          jq -e '.keys|length>0' .github/trust/publishers.jwks.json >/dev/null
          if [ -n "${AWS_KMS_KEY_ID:-}" ]; then
            KID_EXPECT="AWS:${AWS_KMS_KEY_ID}"
            if ! jq -r '.keys[].kid' .github/trust/publishers.jwks.json | grep -Fx "$KID_EXPECT" >/dev/null; then
              echo "::warning::JWKS kid mismatch (expected $KID_EXPECT)"
              [ "${ENFORCEMENT}" = "block" ] && exit 1 || true
            fi
          fi
          audit_log L1 PASSED 1.ART.M1.L1.JWKS-CHECK "⬜ trust-store JWKS проверен" "keys>0; kid match (если задан)"

      - name: Upload audit for this job
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: audit-trust_store_guard
          path: ${{ env.AUDIT }}

  # -----------------------------------------------------------------------------
  # 1.ART.M1.L2 — Подпись KMS + verify OpenSSL
  # -----------------------------------------------------------------------------
  kms_sign_and_verify:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Setup audit helper
        shell: bash
        run: |
          set -euo pipefail
          echo 'GREEN=\033[32m'   >> $GITHUB_ENV
          echo 'RED=\033[31m'     >> $GITHUB_ENV
          echo 'BLUE=\033[34m'    >> $GITHUB_ENV
          echo 'MAGENTA=\033[35m' >> $GITHUB_ENV
          echo 'RESET=\033[0m'    >> $GITHUB_ENV
          echo "AUDIT=$RUNNER_TEMP/audit.json" >> $GITHUB_ENV
          printf '{"job":"kms_sign_and_verify","items":[]}\n' > "$RUNNER_TEMP/audit.json"
          cat > /usr/local/bin/audit_log <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          LEVEL="$1"; STATUS="$2"; CODE="$3"; TITLE="$4"; EVID="${5:-}"; EXTRA="${6:-}"
          case "$LEVEL" in L1) ICON="🟩"; CLR="${GREEN:-}";; L2) ICON="🟦"; CLR="${BLUE:-}";; L3) ICON="🟪"; CLR="${MAGENTA:-}";; *) ICON="▫️"; CLR="";; esac
          [ "$STATUS" = "FAILED" ] && CLR="${RED:-}"
          echo "::group::${ICON} ${CODE} — ${TITLE}"
          [ -n "$CLR" ] && printf "${CLR}%s [%s] %s — %s${RESET}\n" "$ICON" "$STATUS" "$CODE" "$TITLE" || printf "%s [%s] %s — %s\n" "$ICON" "$STATUS" "$CODE" "$TITLE"
          [ -n "$EVID" ] && { echo "EVIDENCE:"; printf "%s\n" "$EVID"; }
          [ -n "$EXTRA" ] && { echo "NOTE: $EXTRA"; }
          echo "::endgroup::"
          TMP=$(mktemp)
          jq --arg level "$LEVEL" --arg status "$STATUS" --arg code "$CODE" --arg title "$TITLE" --arg evid "$EVID" --arg extra "$EXTRA" \
             '.items += [{level:$level,status:$status,code:$code,title:$title,evidence:$evid,extra:$extra}]' "$AUDIT" > "$TMP"
          mv "$TMP" "$AUDIT"
          EOS
          chmod +x /usr/local/bin/audit_log

      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Download build artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: build

      # [5.ACCESS.M1.L1] минимальные права + [1.ART.M1.L2.KMS-SIGN]
      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      # [1.ART.M1.L2.KMS-SIGN] ⬜ Подпись KMS RSASSA_PSS_SHA_256
      - name: KMS Sign artifact.txt (PS256)
        shell: bash
        run: |
          set -euo pipefail
          aws kms sign \
            --key-id "${{ vars.AWS_KMS_KEY_ID }}" \
            --signing-algorithm RSASSA_PSS_SHA_256 \
            --message-type RAW \
            --message fileb://artifact.txt \
            --query Signature --output text | base64 -d > artifact.sig

      - name: Fetch public key and verify with OpenSSL (PSS)
        shell: bash
        run: |
          set -euo pipefail
          aws kms get-public-key --key-id "${{ vars.AWS_KMS_KEY_ID }}" \
            --query PublicKey --output text | base64 -d > aws-pub.der
          openssl pkey -pubin -inform DER -in aws-pub.der -out aws-pub.pem
          openssl dgst -sha256 -verify aws-pub.pem -signature artifact.sig \
            -sigopt rsa_padding_mode:pss -sigopt rsa_pss_saltlen:digest -sigopt rsa_mgf1_md:sha256 artifact.txt
          SIG_HEX=$(xxd -p -c 256 artifact.sig | head -c 64 || true)
          KEY_ID=$(aws kms describe-key --key-id "${{ vars.AWS_KMS_KEY_ID }}" --query 'KeyMetadata.KeyId' --output text || true)
          audit_log L2 PASSED 1.ART.M1.L2.KMS-SIGN "⬜ Подпись KMS (non-exportable)" "sig(32B)=${SIG_HEX}; key=${KEY_ID}" \
            "доп. доказательство: скрин AWS KMS Key policy/ARN"

      - name: Upload audit for this job
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: audit-kms_sign_and_verify
          path: ${{ env.AUDIT }}

  # -----------------------------------------------------------------------------
  # 2.DEPS.M2.L2 — SBOM digest enforcement
  # -----------------------------------------------------------------------------
  sbom_enforce:
    runs-on: ubuntu-latest
    steps:
      - name: Setup audit helper
        shell: bash
        run: |
          set -euo pipefail
          echo 'GREEN=\033[32m'   >> $GITHUB_ENV
          echo 'RED=\033[31m'     >> $GITHUB_ENV
          echo 'BLUE=\033[34m'    >> $GITHUB_ENV
          echo 'MAGENTA=\033[35m' >> $GITHUB_ENV
          echo 'RESET=\033[0m'    >> $GITHUB_ENV
          echo "AUDIT=$RUNNER_TEMP/audit.json" >> $GITHUB_ENV
          printf '{"job":"sbom_enforce","items":[]}\n' > "$RUNNER_TEMP/audit.json"
          cat > /usr/local/bin/audit_log <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          LEVEL="$1"; STATUS="$2"; CODE="$3"; TITLE="$4"; EVID="${5:-}"; EXTRA="${6:-}"
          case "$LEVEL" in L1) ICON="🟩"; CLR="${GREEN:-}";; L2) ICON="🟦"; CLR="${BLUE:-}";; L3) ICON="🟪"; CLR="${MAGENTA:-}";; *) ICON="▫️"; CLR="";; esac
          [ "$STATUS" = "FAILED" ] && CLR="${RED:-}"
          echo "::group::${ICON} ${CODE} — ${TITLE}"
          [ -n "$CLR" ] && printf "${CLR}%s [%s] %s — %s${RESET}\n" "$ICON" "$STATUS" "$CODE" "$TITLE" || printf "%s [%s] %s — %s\n" "$ICON" "$STATUS" "$CODE" "$TITLE"
          [ -n "$EVID" ] && { echo "EVIDENCE:"; printf "%s\n" "$EVID"; }
          [ -n "$EXTRA" ] && { echo "NOTE: $EXTRA"; }
          echo "::endgroup::"
          TMP=$(mktemp)
          jq --arg level "$LEVEL" --arg status "$STATUS" --arg code "$CODE" --arg title "$TITLE" --arg evid "$EVID" --arg extra "$EXTRA" \
             '.items += [{level:$level,status:$status,code:$code,title:$title,evidence:$evid,extra:$extra}]' "$AUDIT" > "$TMP"
          mv "$TMP" "$AUDIT"
          EOS
          chmod +x /usr/local/bin/audit_log

      - name: Download build artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: build

      # [2.DEPS.M2.L2.SBOM-ATTEST] ⚪ Проверка привязки digest
      - name: Enforce SBOM subject digest equals artifact digest
        id: sbomcheck
        shell: bash
        run: |
          set -euo pipefail
          ART_DIGEST=$(sha256sum artifact.txt | awk '{print $1}')
          SBOM_DIGEST=$(jq -r '.files[]?|select(.fileName=="artifact.txt")|.checksums[]?|select(.algorithm=="SHA256")|.checksumValue' sbom.spdx.json | head -n1)
          echo "artifact=${ART_DIGEST} sbom=${SBOM_DIGEST}"
          if [ -n "$SBOM_DIGEST" ] && [ "$ART_DIGEST" = "$SBOM_DIGEST" ]; then
            audit_log L2 PASSED 2.DEPS.M2.L2.SBOM-ATTEST "⚪ SBOM привязан к digest" "SHA256 match: $ART_DIGEST"
          else
            audit_log L2 $([ "${ENFORCEMENT}" = "block" ] && echo FAILED || echo WARN) \
              2.DEPS.M2.L2.SBOM-ATTEST "⚪ SBOM привязан к digest" "mismatch or missing"
            [ "${ENFORCEMENT}" = "block" ] && exit 1 || true
          fi

      - name: Upload audit for this job
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: audit-sbom_enforce
          path: ${{ env.AUDIT }}

  # -----------------------------------------------------------------------------
  # 3.SECRETS.M1 — Repo security flags (Secret Scanning/Push Protection)
  # -----------------------------------------------------------------------------
  security_settings_guard:
    runs-on: ubuntu-latest
    steps:
      - name: Setup audit helper
        shell: bash
        run: |
          set -euo pipefail
          echo 'GREEN=\033[32m'   >> $GITHUB_ENV
          echo 'RED=\033[31m'     >> $GITHUB_ENV
          echo 'BLUE=\033[34m'    >> $GITHUB_ENV
          echo 'MAGENTA=\033[35m' >> $GITHUB_ENV
          echo 'RESET=\033[0m'    >> $GITHUB_ENV
          echo "AUDIT=$RUNNER_TEMP/audit.json" >> $GITHUB_ENV
          printf '{"job":"security_settings_guard","items":[]}\n' > "$RUNNER_TEMP/audit.json"
          cat > /usr/local/bin/audit_log <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          LEVEL="$1"; STATUS="$2"; CODE="$3"; TITLE="$4"; EVID="${5:-}"; EXTRA="${6:-}"
          case "$LEVEL" in L1) ICON="🟩"; CLR="${GREEN:-}";; L2) ICON="🟦"; CLR="${BLUE:-}";; L3) ICON="🟪"; CLR="${MAGENTA:-}";; *) ICON="▫️"; CLR="";; esac
          [ "$STATUS" = "FAILED" ] && CLR="${RED:-}"
          echo "::group::${ICON} ${CODE} — ${TITLE}"
          [ -n "$CLR" ] && printf "${CLR}%s [%s] %s — %s${RESET}\n" "$ICON" "$STATUS" "$CODE" "$TITLE" || printf "%s [%s] %s — %s\n" "$ICON" "$STATUS" "$CODE" "$TITLE"
          [ -n "$EVID" ] && { echo "EVIDENCE:"; printf "%s\n" "$EVID"; }
          [ -n "$EXTRA" ] && { echo "NOTE: $EXTRA"; }
          echo "::endgroup::"
          TMP=$(mktemp)
          jq --arg level "$LEVEL" --arg status "$STATUS" --arg code "$CODE" --arg title "$TITLE" --arg evid "$EVID" --arg extra "$EXTRA" \
             '.items += [{level:$level,status:$status,code:$code,title:$title,evidence:$evid,extra:$extra}]' "$AUDIT" > "$TMP"
          mv "$TMP" "$AUDIT"
          EOS
          chmod +x /usr/local/bin/audit_log

      # [5.ACCESS.M1.L1] OIDC GH App токен достаём безопасно (без внешних actions)
      - name: Configure AWS for GH App secret (OIDC)
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Fetch GH App key from AWS Secrets Manager (PEM)
        id: fetch_appkey
        shell: bash
        run: |
          set -euo pipefail
          umask 077
          RAW="$(aws secretsmanager get-secret-value --secret-id ci/github/app-private-key --query SecretString --output text)"
          if printf '%s' "$RAW" | head -n1 | grep -q -- '-----BEGIN '; then
            printf '%s' "$RAW" > app.pem
          else
            VAL="$(printf '%s' "$RAW" | jq -r '.value // empty' || true)"
            printf '%s' "$VAL" > app.pem
          fi
          openssl pkey -in app.pem -noout >/dev/null 2>&1 || { echo "::error::Invalid PEM"; exit 1; }

      - name: Get GitHub App installation token
        id: app_token
        env:
          APP_ID: ${{ secrets.GHAPP_ID }}
          API_URL: ${{ github.api_url }}
          REPO: ${{ github.repository }}
        shell: bash
        run: |
          set -euo pipefail
          b64url(){ openssl base64 -A | tr '+/' '-_' | tr -d '='; }
          NOW=$(date +%s); EXP=$((NOW+540))
          HDR=$(printf '{"alg":"RS256","typ":"JWT"}' | b64url)
          PAY=$(printf '{"iat":%s,"exp":%s,"iss":"%s"}' "$NOW" "$EXP" "$APP_ID" | b64url)
          SIG=$(printf %s "$HDR.$PAY" | openssl dgst -sha256 -sign app.pem -binary | b64url)
          JWT="$HDR.$PAY.$SIG"
          API="${API_URL:-https://api.github.com}"
          INST_ID=$(curl -fsSL -H "Authorization: Bearer ${JWT}" -H "Accept: application/vnd.github+json" "${API}/repos/${REPO}/installation" | jq -r '.id')
          TOKEN=$(curl -fsSL -X POST -H "Authorization: Bearer ${JWT}" -H "Accept: application/vnd.github+json" "${API}/app/installations/${INST_ID}/access_tokens" | jq -r '.token')
          echo "GH_TOKEN=${TOKEN}" >> "$GITHUB_ENV"
          shred -u app.pem || rm -f app.pem

      # [3.SECRETS.M1.L2.SECRET-SCAN] ⬜ Secret Scanning + Push Protection включены
      # [3.SECRETS.M1.L1.SM-ONLY]    ⬜ Минимальные perms в workflow
      - name: Check repo security flags
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          DATA=$(gh api -H "Accept: application/vnd.github+json" repos/${{ github.repository }})
          SEC=$(echo "$DATA" | jq -r '.security_and_analysis')
          SS=$(echo "$SEC" | jq -r 'try .secret_scanning.status // empty')
          PP=$(echo "$SEC" | jq -r 'try .secret_scanning_push_protection.status // empty')
          echo "Secret scanning=${SS}, Push protection=${PP}"
          if [ "$SS" = "enabled" ] && [ "$PP" = "enabled" ]; then
            audit_log L2 PASSED 3.SECRETS.M1.L2.SECRET-SCAN "⬜ Secret Scanning + Push Protection" "оба enabled" \
              "доп. доказательство: скрин Repo → Code security and analysis"
            audit_log L1 PASSED 3.SECRETS.M1.L1.SM-ONLY "⬜ Secrets только из SM/KMS; минимальные perms" \
              "permissions по умолчанию минимальны"
          else
            audit_log L2 $([ "${ENFORCEMENT}" = "block" ] && echo FAILED || echo WARN) \
              3.SECRETS.M1.L2.SECRET-SCAN "⬜ Secret Scanning + Push Protection" "не включены"
            [ "${ENFORCEMENT}" = "block" ] && exit 1 || true
          fi

      - name: Upload audit for this job
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: audit-security_settings_guard
          path: ${{ env.AUDIT }}

  # -----------------------------------------------------------------------------
  # 9.TEST.M1 — IaC/config scan (presence)
  # -----------------------------------------------------------------------------
  iac_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Setup audit helper
        shell: bash
        run: |
          set -euo pipefail
          echo 'GREEN=\033[32m'   >> $GITHUB_ENV
          echo 'RED=\033[31m'     >> $GITHUB_ENV
          echo 'BLUE=\033[34m'    >> $GITHUB_ENV
          echo 'MAGENTA=\033[35m' >> $GITHUB_ENV
          echo 'RESET=\033[0m'    >> $GITHUB_ENV
          echo "AUDIT=$RUNNER_TEMP/audit.json" >> $GITHUB_ENV
          printf '{"job":"iac_scan","items":[]}\n' > "$RUNNER_TEMP/audit.json"
          cat > /usr/local/bin/audit_log <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          LEVEL="$1"; STATUS="$2"; CODE="$3"; TITLE="$4"; EVID="${5:-}"; EXTRA="${6:-}"
          case "$LEVEL" in L1) ICON="🟩"; CLR="${GREEN:-}";; L2) ICON="🟦"; CLR="${BLUE:-}";; L3) ICON="🟪"; CLR="${MAGENTA:-}";; *) ICON="▫️"; CLR="";; esac
          [ "$STATUS" = "FAILED" ] && CLR="${RED:-}"
          echo "::group::${ICON} ${CODE} — ${TITLE}"
          [ -n "$CLR" ] && printf "${CLR}%s [%s] %s — %s${RESET}\n" "$ICON" "$STATUS" "$CODE" "$TITLE" || printf "%s [%s] %s — %s\n" "$ICON" "$STATUS" "$CODE" "$TITLE"
          [ -n "$EVID" ] && { echo "EVIDENCE:"; printf "%s\n" "$EVID"; }
          [ -n "$EXTRA" ] && { echo "NOTE: $EXTRA"; }
          echo "::endgroup::"
          TMP=$(mktemp)
          jq --arg level "$LEVEL" --arg status "$STATUS" --arg code "$CODE" --arg title "$TITLE" --arg evid "$EVID" --arg extra "$EXTRA" \
             '.items += [{level:$level,status:$status,code:$code,title:$title,evidence:$evid,extra:$extra}]' "$AUDIT" > "$TMP"
          mv "$TMP" "$AUDIT"
          EOS
          chmod +x /usr/local/bin/audit_log

      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      # [9.TEST.M1.L1.RUN-TOOLS] ⬜ IaC scan presence
      - name: Install trivy
        shell: bash
        run: |
          set -euo pipefail
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy --version

      - name: Run IaC/config scan (WARN)
        shell: bash
        run: |
          set -euo pipefail
          trivy config -q --exit-code 0 --format table .
          audit_log L1 PASSED 9.TEST.M1.L1.RUN-TOOLS "⬜ IaC scan выполнен" "Trivy config report в логах шага"

      - name: Upload audit for this job
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: audit-iac_scan
          path: ${{ env.AUDIT }}

  # -----------------------------------------------------------------------------
  # 6.PIPE — Promote gate (только для main/push, требует Environment approval)
  # -----------------------------------------------------------------------------
  promote_to_prod:
    needs: [ build_and_attest, security_settings_guard, kms_sign_and_verify, sbom_enforce, iac_scan, verify_action_publishers, dependency_review, codeql ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: production
    concurrency:
      group: deploy-${{ github.ref_name }}
      cancel-in-progress: true
    steps:
      # [6.PIPE.M1.L1.APPROVE-CRIT] ⬜ Требуется approve для деплоя
      - name: Await environment approval
        shell: bash
        run: |
          echo "All upstream gates passed. Waiting for env approval…"
          echo "NOTE: доп. доказательство — скрин Environment 'production' с Required reviewers."

  # -----------------------------------------------------------------------------
  # Итоговая сводка — собираем все audit-артефакты и печатаем таблицу
  # -----------------------------------------------------------------------------
  audit_summary:
    needs: [ codeql, dependency_review, verify_action_publishers, build_and_attest, trust_store_guard, kms_sign_and_verify, sbom_enforce, security_settings_guard, iac_scan ]
    runs-on: ubuntu-latest
    steps:
      - name: Download all audit artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          path: audits

      - name: Merge and print summary
        shell: bash
        run: |
          set -euo pipefail
          jq -s '{items: (map(.items) | add)}' audits/**/audit.json > merged-audit.json
          echo "::group::📊 SUMMARY (Criterion / Metric / Level)"
          jq -r '
            def pad(n): tostring | . + (" " * (n - length));
            .items as $i
            | "STATUS  | CODE                             | TITLE",
              "------- | --------------------------------- | -----",
              ( $i[] | "\(.status|pad(7)) | \(.code|pad(33)) | \(.title)" )
          ' merged-audit.json
          echo "::endgroup::"

      - name: Upload merged summary
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: audit-summary
          path: merged-audit.json
