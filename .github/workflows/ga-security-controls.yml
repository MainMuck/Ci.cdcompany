# =========================================================================================
# Security Framework Gates — полный workflow с аудит-логами и сводкой
# Обозначения: C# — номер критерия; ⬜ M1 / ⚪ M2 — метрики; L1/L2/L3 — уровни
# Примеры логов: "C1 ⬜ M1 L1 | ART.M1.SIGN — Подписываем артефакт"
# =========================================================================================

name: Security Framework Gates

on:
  push:
    branches: ['**']                      # все ветки
  pull_request:
    branches: ['**']                      # все ветки
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  packages: read
  id-token: write
  attestations: write

env:
  # На default-ветке — блок, на остальных — warn
  ENFORCEMENT: ${{ github.ref_name == github.event.repository.default_branch && 'block' || 'warn' }}

# ---------- ХЕЛПЕР-ШАГ: вставляется первым в каждый job ----------
# Создаёт утилиту audit_log, задаёт цвета/иконки и файл частичного отчёта AUDIT_PART.
# Не выносится в YAML-якорь, потому что GitHub Actions не поддерживает анкеры.

jobs:

  # C9 TEST.M1/M2 — CodeQL (SAST)
  codeql:
    runs-on: ubuntu-latest
    steps:
      - name: Setup audit logger (per job)
        shell: bash
        run: |
          set -euo pipefail
          echo 'GREEN=\033[32m'   >> $GITHUB_ENV
          echo 'BLUE=\033[34m'    >> $GITHUB_ENV
          echo 'MAGENTA=\033[35m' >> $GITHUB_ENV
          echo 'RED=\033[31m'     >> $GITHUB_ENV
          echo 'RESET=\033[0m'    >> $GITHUB_ENV
          echo 'ICON_M1=⬜'        >> $GITHUB_ENV
          echo 'ICON_M2=⚪'        >> $GITHUB_ENV
          PART="$RUNNER_TEMP/audit-${GITHUB_JOB}.json"; echo "AUDIT_PART=$PART" >> $GITHUB_ENV
          printf '{"items":[]}\n' > "$PART"
          cat > /usr/local/bin/audit_log <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          LEVEL="$1"; STATUS="$2"; CODE="$3"; TITLE="$4"; EVID="${5:-}"; EXTRA="${6:-}"
          case "$LEVEL" in L1) CLR="${GREEN:-}";; L2) CLR="${BLUE:-}";; L3) CLR="${MAGENTA:-}";; *) CLR="";; esac
          [ "$STATUS" = "FAILED" ] && CLR="${RED:-}"
          echo "::group::${CODE} — ${TITLE}"
          printf "${CLR}%s [%s]  %s — %s${RESET}\n" "$LEVEL" "$STATUS" "$CODE" "$TITLE"
          [ -n "$EVID" ] && { echo "EVIDENCE:"; printf "%s\n" "$EVID"; }
          [ -n "$EXTRA" ] && { echo "NOTE: $EXTRA"; }
          echo "::endgroup::"
          FILE="${AUDIT_PART:-/tmp/audit-part.json}"; TMP=$(mktemp)
          jq --arg level "$LEVEL" --arg status "$STATUS" --arg code "$CODE" --arg title "$TITLE" --arg evid "$EVID" --arg extra "$EXTRA" \
             '.items += [{level:$level,status:$status,code:$code,title:$title,evidence:$evid,extra:$extra}]' "$FILE" > "$TMP"
          mv "$TMP" "$FILE"
          EOS
          chmod +x /usr/local/bin/audit_log

      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - uses: github/codeql-action/init@192325c86100d080feab897ff886c34abd4c83a3
        with:
          languages: python, actions
          build-mode: none
      - uses: github/codeql-action/analyze@192325c86100d080feab897ff886c34abd4c83a3

      - name: Log C9 ⬜ M1 L1 | TEST.M1.SAST-RAN
        if: always()
        run: |
          audit_log L1 PASSED "C9 ⬜ M1 L1 | TEST.M1.SAST-RAN" \
            "CodeQL (SAST) выполнен" \
            "Evidence: SARIF в Security → Code scanning alerts"

      - name: Upload audit part
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with: { name: audit-${{ github.job }}, path: ${{ env.AUDIT_PART }} }

  # C9 TEST.M1 — Dependency Review (SCA presence)
  dependency_review:
    runs-on: ubuntu-latest
    steps:
      - name: Setup audit logger (per job)
        shell: bash
        run: |
          set -euo pipefail
          echo 'GREEN=\033[32m'   >> $GITHUB_ENV
          echo 'BLUE=\033[34m'    >> $GITHUB_ENV
          echo 'MAGENTA=\033[35m' >> $GITHUB_ENV
          echo 'RED=\033[31m'     >> $GITHUB_ENV
          echo 'RESET=\033[0m'    >> $GITHUB_ENV
          echo 'ICON_M1=⬜'        >> $GITHUB_ENV
          echo 'ICON_M2=⚪'        >> $GITHUB_ENV
          PART="$RUNNER_TEMP/audit-${GITHUB_JOB}.json"; echo "AUDIT_PART=$PART" >> $GITHUB_ENV
          printf '{"items":[]}\n' > "$PART"
          cat > /usr/local/bin/audit_log <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          LEVEL="$1"; STATUS="$2"; CODE="$3"; TITLE="$4"; EVID="${5:-}"; EXTRA="${6:-}"
          case "$LEVEL" in L1) CLR="${GREEN:-}";; L2) CLR="${BLUE:-}";; L3) CLR="${MAGENTA:-}";; *) CLR="";; esac
          [ "$STATUS" = "FAILED" ] && CLR="${RED:-}"
          echo "::group::${CODE} — ${TITLE}"
          printf "${CLR}%s [%s]  %s — %s${RESET}\n" "$LEVEL" "$STATUS" "$CODE" "$TITLE"
          [ -n "$EVID" ] && { echo "EVIDENCE:"; printf "%s\n" "$EVID"; }
          [ -n "$EXTRA" ] && { echo "NOTE: $EXTRA"; }
          echo "::endgroup::"
          FILE="${AUDIT_PART:-/tmp/audit-part.json}"; TMP=$(mktemp)
          jq --arg level "$LEVEL" --arg status "$STATUS" --arg code "$CODE" --arg title "$TITLE" --arg evid "$EVID" --arg extra "$EXTRA" \
             '.items += [{level:$level,status:$status,code:$code,title:$title,evidence:$evid,extra:$extra}]' "$FILE" > "$TMP"
          mv "$TMP" "$FILE"
          EOS
          chmod +x /usr/local/bin/audit_log

      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Compute base/head refs
        id: deprefs
        shell: bash
        run: |
          set -euo pipefail
          HEAD_SHA="${GITHUB_SHA}"
          if [ "${GITHUB_EVENT_NAME}" = "push" ]; then
            BEFORE="$(jq -r .before "$GITHUB_EVENT_PATH")"
            if [ -n "$BEFORE" ] && [ "$BEFORE" != "0000000000000000000000000000000000000000" ]; then
              BASE_SHA="$BEFORE"
            else
              git fetch --no-tags --prune --depth=2 origin "${GITHUB_REF}"
              BASE_SHA="$(git rev-parse "${HEAD_SHA}^" 2>/dev/null || echo "")"
            fi
          else
            BASE_SHA="$(jq -r .pull_request.base.sha "$GITHUB_EVENT_PATH")"
          fi
          echo "base=$BASE_SHA" >> "$GITHUB_OUTPUT"
          echo "head=$HEAD_SHA" >> "$GITHUB_OUTPUT"
          echo "skip=$([ -z "$BASE_SHA" ] && echo true || echo false)" >> "$GITHUB_OUTPUT"

      - uses: actions/dependency-review-action@595b5aeba73380359d98a5e087f648dbb0edce1b
        if: steps.deprefs.outputs.skip != 'true'
        with:
          base-ref: ${{ steps.deprefs.outputs.base }}
          head-ref: ${{ steps.deprefs.outputs.head }}
          fail-on-severity: critical
        continue-on-error: ${{ env.ENFORCEMENT != 'block' }}

      - name: Log C9 ⬜ M1 L1 | TEST.M1.SCA-RAN
        if: always()
        run: |
          audit_log L1 PASSED "C9 ⬜ M1 L1 | TEST.M1.SCA-RAN" \
            "Dependency Review (SCA) выполнен" \
            "Evidence: summary шага dependency-review-action"

      - name: Upload audit part
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with: { name: audit-${{ github.job }}, path: ${{ env.AUDIT_PART }} }

  # C8 THIRD.M1 — allow-list + pinned actions
  verify_action_publishers:
    runs-on: ubuntu-latest
    steps:
      - name: Setup audit logger (per job)
        shell: bash
        run: |
          set -euo pipefail
          echo 'GREEN=\033[32m'   >> $GITHUB_ENV
          echo 'BLUE=\033[34m'    >> $GITHUB_ENV
          echo 'MAGENTA=\033[35m' >> $GITHUB_ENV
          echo 'RED=\033[31m'     >> $GITHUB_ENV
          echo 'RESET=\033[0m'    >> $GITHUB_ENV
          echo 'ICON_M1=⬜'        >> $GITHUB_ENV
          echo 'ICON_M2=⚪'        >> $GITHUB_ENV
          PART="$RUNNER_TEMP/audit-${GITHUB_JOB}.json"; echo "AUDIT_PART=$PART" >> $GITHUB_ENV
          printf '{"items":[]}\n' > "$PART"
          cat > /usr/local/bin/audit_log <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          LEVEL="$1"; STATUS="$2"; CODE="$3"; TITLE="$4"; EVID="${5:-}"; EXTRA="${6:-}"
          case "$LEVEL" in L1) CLR="${GREEN:-}";; L2) CLR="${BLUE:-}";; L3) CLR="${MAGENTA:-}";; *) CLR="";; esac
          [ "$STATUS" = "FAILED" ] && CLR="${RED:-}"
          echo "::group::${CODE} — ${TITLE}"
          printf "${CLR}%s [%s]  %s — %s${RESET}\n" "$LEVEL" "$STATUS" "$CODE" "$TITLE"
          [ -n "$EVID" ] && { echo "EVIDENCE:"; printf "%s\n" "$EVID"; }
          [ -n "$EXTRA" ] && { echo "NOTE: $EXTRA"; }
          echo "::endgroup::"
          FILE="${AUDIT_PART:-/tmp/audit-part.json}"; TMP=$(mktemp)
          jq --arg level "$LEVEL" --arg status "$STATUS" --arg code "$CODE" --arg title "$TITLE" --arg evid "$EVID" --arg extra "$EXTRA" \
             '.items += [{level:$level,status:$status,code:$code,title:$title,evidence:$evid,extra:$extra}]' "$FILE" > "$TMP"
          mv "$TMP" "$FILE"
          EOS
          chmod +x /usr/local/bin/audit_log

      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Install yq
        run: |
          sudo curl -sSL -o /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Verify action publishers (WARN on non-default branches)
        env:
          GH_TOKEN: ${{ github.token }}
          ALLOW_OWNERS: actions,github,dependabot,aws-actions,google-github-actions,azure
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t FILES < <(git ls-files '.github/workflows/*.yml' '.github/workflows/*.yaml' 2>/dev/null || true)
          [ ${#FILES[@]} -eq 0 ] && exit 0
          status=0
          IFS=',' read -r -a ALLOWED <<< "${ALLOW_OWNERS}"
          is_allowed(){ local o="$1"; for a in "${ALLOWED[@]}"; do [ "$o" = "$a" ] && return 0; done; return 1; }
          for f in "${FILES[@]}"; do
            while read -r owner repo ref; do
              [ -z "$owner" ] && continue
              if ! is_allowed "$owner"; then echo "::warning file=$f::Owner '$owner' не в allow-list (${ALLOW_OWNERS})"; status=1; fi
              if ! [[ "$ref" =~ ^[0-9a-f]{40}$ ]]; then echo "::warning file=$f::'$owner/$repo@$ref' не закреплён на полный commit SHA"; status=1; fi
              data=$(gh api "repos/$owner/$repo" -H "Accept: application/vnd.github+json" || true)
              verified=$(jq -r 'try .owner.is_verified // false' <<<"$data")
              if [ "$verified" != "true" ] && ! is_allowed "$owner"; then
                echo "::warning file=$f::Издатель '$owner' не verified"; status=1
              fi
            done < <(yq -r '.. | .uses? | select(type=="string")' "$f" | awk -F'[@/]' '{ if (NF>=3) printf "%s %s %s\n",$1,$2,$NF }')
          done
          if [ $status -ne 0 ] && [ "${ENFORCEMENT}" = "block" ]; then
            echo "::error::Проверка издателей/пиннинга не прошла (ENFORCEMENT=block)."; exit 1
          fi

      - name: Log C8 ⬜ M1 L1 | THIRD.M1.ALLOW+PIN
        if: always()
        run: |
          audit_log L1 PASSED "C8 ⬜ M1 L1 | THIRD.M1.ALLOW+PIN" \
            "Allow-list издателей + pin на commit SHA проверены" \
            "Evidence: WARN/ERROR в этом шаге при нарушениях"

      - name: Upload audit part
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with: { name: audit-${{ github.job }}, path: ${{ env.AUDIT_PART }} }

  # C1 ART.M1 (подпись/attest) + C2 DEPS.M2 (SBOM)
  build_and_attest:
    needs: [codeql, dependency_review, verify_action_publishers]
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Setup audit logger (per job)
        shell: bash
        run: |
          set -euo pipefail
          echo 'GREEN=\033[32m'   >> $GITHUB_ENV
          echo 'BLUE=\033[34m'    >> $GITHUB_ENV
          echo 'MAGENTA=\033[35m' >> $GITHUB_ENV
          echo 'RED=\033[31m'     >> $GITHUB_ENV
          echo 'RESET=\033[0m'    >> $GITHUB_ENV
          echo 'ICON_M1=⬜'        >> $GITHUB_ENV
          echo 'ICON_M2=⚪'        >> $GITHUB_ENV
          PART="$RUNNER_TEMP/audit-${GITHUB_JOB}.json"; echo "AUDIT_PART=$PART" >> $GITHUB_ENV
          printf '{"items":[]}\n' > "$PART"
          cat > /usr/local/bin/audit_log <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          LEVEL="$1"; STATUS="$2"; CODE="$3"; TITLE="$4"; EVID="${5:-}"; EXTRA="${6:-}"
          case "$LEVEL" in L1) CLR="${GREEN:-}";; L2) CLR="${BLUE:-}";; L3) CLR="${MAGENTA:-}";; *) CLR="";; esac
          [ "$STATUS" = "FAILED" ] && CLR="${RED:-}"
          echo "::group::${CODE} — ${TITLE}"
          printf "${CLR}%s [%s]  %s — %s${RESET}\n" "$LEVEL" "$STATUS" "$CODE" "$TITLE"
          [ -n "$EVID" ] && { echo "EVIDENCE:"; printf "%s\n" "$EVID"; }
          [ -n "$EXTRA" ] && { echo "NOTE: $EXTRA"; }
          echo "::endgroup::"
          FILE="${AUDIT_PART:-/tmp/audit-part.json}"; TMP=$(mktemp)
          jq --arg level "$LEVEL" --arg status "$STATUS" --arg code "$CODE" --arg title "$TITLE" --arg evid "$EVID" --arg extra "$EXTRA" \
             '.items += [{level:$level,status:$status,code:$code,title:$title,evidence:$evid,extra:$extra}]' "$FILE" > "$TMP"
          mv "$TMP" "$FILE"
          EOS
          chmod +x /usr/local/bin/audit_log

      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Build artifact
        run: |
          echo "hello $(date -u +%FT%TZ)" > artifact.txt
          sha256sum artifact.txt | tee checksums.txt

      - name: Export SBOM (Syft) for artifact.txt
        id: sbom
        shell: bash
        run: |
          set -euo pipefail
          ART_DIGEST="$(sha256sum artifact.txt | awk '{print $1}')"
          VER="v1.33.0"
          URL1="https://github.com/anchore/syft/releases/download/${VER}/syft_${VER#v}_linux_amd64.tar.gz"
          URL2="https://github.com/anchore/syft/releases/download/${VER}/syft_Linux_x86_64.tar.gz"
          curl -fsSL "$URL1" -o syft.tgz || curl -fsSL "$URL2" -o syft.tgz
          tar -xzf syft.tgz syft && sudo install -m0755 syft /usr/local/bin/syft
          syft "file:artifact.txt" -o spdx-json=sbom.spdx.json
          tmp=$(mktemp)
          jq --arg d "$ART_DIGEST" '
            .files = (
              ((.files // []) | map(select(.fileName != "artifact.txt")))
              + [{ "fileName":"artifact.txt","SPDXID":"SPDXRef-File-artifact.txt",
                   "checksums":[{"algorithm":"SHA256","checksumValue":$d}] }]
          )' sbom.spdx.json > "$tmp"
          mv "$tmp" sbom.spdx.json

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: build
          path: |
            artifact.txt
            checksums.txt
            sbom.spdx.json

      - name: Attest provenance (always)
        uses: actions/attest-build-provenance@ef244123eb79f2f7a7e75d99086184180e6d0018
        with:
          subject-path: artifact.txt
        continue-on-error: ${{ env.ENFORCEMENT != 'block' && github.event_name != 'push' }}

      - name: Log C1 ⬜ M1 L1 | ART.M1.SIGN
        if: always()
        run: |
          audit_log L1 $([ "${{ job.status }}" = "success" ] && echo PASSED || echo WARN) \
            "C1 ⬜ M1 L1 | ART.M1.SIGN" \
            "Подписываем артефакт: опубликована provenance attestation" \
            "Evidence: Actions → Attestations таб (artifact.txt)"

      - name: Attest SBOM (always)
        uses: actions/attest-sbom@5026d3663739160db546203eeaffa6aa1c51a4d6
        with:
          subject-path: artifact.txt
          sbom-path: sbom.spdx.json
        continue-on-error: ${{ env.ENFORCEMENT != 'block' && github.event_name != 'push' }}

      - name: Log C2 ⚪ M2 L2 | DEPS.M2.SBOM-ATTEST
        if: always()
        run: |
          audit_log L2 $([ "${{ job.status }}" = "success" ] && echo PASSED || echo WARN) \
            "C2 ⚪ M2 L2 | DEPS.M2.SBOM-ATTEST" \
            "SBOM attested для artifact.txt" \
            "Evidence: sbom.spdx.json + запись в Attestations"

      - name: Verify attestations (always)
        shell: bash
        continue-on-error: ${{ env.ENFORCEMENT != 'block' && github.event_name != 'push' }}
        run: |
          set -euo pipefail
          WF_NOREF="${GITHUB_WORKFLOW_REF%@*}"
          ok=1
          for i in $(seq 1 6); do
            if gh attestation verify artifact.txt \
                 --repo "${{ github.repository }}" \
                 --predicate-type "https://slsa.dev/provenance/v1" \
                 --cert-oidc-issuer "https://token.actions.githubusercontent.com" \
                 --signer-workflow "$WF_NOREF" \
                 --deny-self-hosted-runners \
                 --limit 50 ; then ok=0; break; fi
            sleep 5
          done
          if [ $ok -eq 0 ]; then
            audit_log L1 PASSED "C1 ⬜ M1 L1 | ART.M1.VERIFY" "Verify attestations перед Promote/Deploy" "gh attestation verify → ✓"
          else
            mode="${ENFORCEMENT}"
            audit_log L1 $([ "$mode" = "block" ] && echo FAILED || echo WARN) \
              "C1 ⬜ M1 L1 | ART.M1.VERIFY" "Verify attestations" \
              "not strictly ✓ (см. логи). Вероятно PR/форк ограничения."
            [ "$mode" = "block" ] && exit 1 || true
          fi

      - name: Upload audit part
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with: { name: audit-${{ github.job }}, path: ${{ env.AUDIT_PART }} }

  # C1 ART.M1 — trust store / JWKS
  trust_store_guard:
    runs-on: ubuntu-latest
    steps:
      - name: Setup audit logger (per job)
        shell: bash
        run: |
          set -euo pipefail
          echo 'GREEN=\033[32m'   >> $GITHUB_ENV
          echo 'BLUE=\033[34m'    >> $GITHUB_ENV
          echo 'MAGENTA=\033[35m' >> $GITHUB_ENV
          echo 'RED=\033[31m'     >> $GITHUB_ENV
          echo 'RESET=\033[0m'    >> $GITHUB_ENV
          echo 'ICON_M1=⬜'        >> $GITHUB_ENV
          echo 'ICON_M2=⚪'        >> $GITHUB_ENV
          PART="$RUNNER_TEMP/audit-${GITHUB_JOB}.json"; echo "AUDIT_PART=$PART" >> $GITHUB_ENV
          printf '{"items":[]}\n' > "$PART"
          cat > /usr/local/bin/audit_log <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          LEVEL="$1"; STATUS="$2"; CODE="$3"; TITLE="$4"; EVID="${5:-}"; EXTRA="${6:-}"
          case "$LEVEL" in L1) CLR="${GREEN:-}";; L2) CLR="${BLUE:-}";; L3) CLR="${MAGENTA:-}";; *) CLR="";; esac
          [ "$STATUS" = "FAILED" ] && CLR="${RED:-}"
          echo "::group::${CODE} — ${TITLE}"
          printf "${CLR}%s [%s]  %s — %s${RESET}\n" "$LEVEL" "$STATUS" "$CODE" "$TITLE"
          [ -n "$EVID" ] && { echo "EVIDENCE:"; printf "%s\n" "$EVID"; }
          [ -n "$EXTRA" ] && { echo "NOTE: $EXTRA"; }
          echo "::endgroup::"
          FILE="${AUDIT_PART:-/tmp/audit-part.json}"; TMP=$(mktemp)
          jq --arg level "$LEVEL" --arg status "$STATUS" --arg code "$CODE" --arg title "$TITLE" --arg evid "$EVID" --arg extra "$EXTRA" \
             '.items += [{level:$level,status:$status,code:$code,title:$title,evidence:$evid,extra:$extra}]' "$FILE" > "$TMP"
          mv "$TMP" "$FILE"
          EOS
          chmod +x /usr/local/bin/audit_log

      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Validate JWKS exists and (optionally) matches AWS_KMS_KEY_ID
        env:
          AWS_KMS_KEY_ID: ${{ vars.AWS_KMS_KEY_ID }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -f .github/trust/publishers.jwks.json ]; then
            jq -e '.keys|length>0' .github/trust/publishers.jwks.json >/dev/null
            MSG="JWKS present"
            if [ -n "${AWS_KMS_KEY_ID:-}" ]; then
              KID_EXPECT="AWS:${AWS_KMS_KEY_ID}"
              if jq -r '.keys[].kid' .github/trust/publishers.jwks.json | grep -Fx "$KID_EXPECT" >/dev/null; then
                MSG="$MSG; kid matches $KID_EXPECT"
              else
                MSG="$MSG; kid mismatch (expected $KID_EXPECT)"
                [ "${ENFORCEMENT}" = "block" ] && { echo "::error::kid mismatch"; exit 1; }
              fi
            fi
            audit_log L1 PASSED "C1 ⬜ M1 L1 | ART.M1.TRUSTSTORE" "JWKS/Trust-store проверен" "$MSG"
          else
            audit_log L1 $([ "${ENFORCEMENT}" = "block" ] && echo FAILED || echo WARN) \
              "C1 ⬜ M1 L1 | ART.M1.TRUSTSTORE" "JWKS отсутствует" \
              "Добавь .github/trust/publishers.jwks.json"
            [ "${ENFORCEMENT}" = "block" ] && exit 1 || true
          fi

      - name: Upload audit part
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with: { name: audit-${{ github.job }}, path: ${{ env.AUDIT_PART }} }

  # C3 SECRETS.M1 — Secret scanning settings + минимальные permissions
  security_settings_guard:
    runs-on: ubuntu-latest
    steps:
      - name: Setup audit logger (per job)
        shell: bash
        run: |
          set -euo pipefail
          echo 'GREEN=\033[32m'   >> $GITHUB_ENV
          echo 'BLUE=\033[34m'    >> $GITHUB_ENV
          echo 'MAGENTA=\033[35m' >> $GITHUB_ENV
          echo 'RED=\033[31m'     >> $GITHUB_ENV
          echo 'RESET=\033[0m'    >> $GITHUB_ENV
          echo 'ICON_M1=⬜'        >> $GITHUB_ENV
          echo 'ICON_M2=⚪'        >> $GITHUB_ENV
          PART="$RUNNER_TEMP/audit-${GITHUB_JOB}.json"; echo "AUDIT_PART=$PART" >> $GITHUB_ENV
          printf '{"items":[]}\n' > "$PART"
          cat > /usr/local/bin/audit_log <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          LEVEL="$1"; STATUS="$2"; CODE="$3"; TITLE="$4"; EVID="${5:-}"; EXTRA="${6:-}"
          case "$LEVEL" in L1) CLR="${GREEN:-}";; L2) CLR="${BLUE:-}";; L3) CLR="${MAGENTA:-}";; *) CLR="";; esac
          [ "$STATUS" = "FAILED" ] && CLR="${RED:-}"
          echo "::group::${CODE} — ${TITLE}"
          printf "${CLR}%s [%s]  %s — %s${RESET}\n" "$LEVEL" "$STATUS" "$CODE" "$TITLE"
          [ -n "$EVID" ] && { echo "EVIDENCE:"; printf "%s\n" "$EVID"; }
          [ -n "$EXTRA" ] && { echo "NOTE: $EXTRA"; }
          echo "::endgroup::"
          FILE="${AUDIT_PART:-/tmp/audit-part.json}"; TMP=$(mktemp)
          jq --arg level "$LEVEL" --arg status "$STATUS" --arg code "$CODE" --arg title "$TITLE" --arg evid "$EVID" --arg extra "$EXTRA" \
             '.items += [{level:$level,status:$status,code:$code,title:$title,evidence:$evid,extra:$extra}]' "$FILE" > "$TMP"
          mv "$TMP" "$FILE"
          EOS
          chmod +x /usr/local/bin/audit_log

      - name: Check repo security flags (via GITHUB_TOKEN)
        env: { GH_TOKEN: ${{ github.token }} }
        shell: bash
        run: |
          set -euo pipefail
          DATA=$(gh api -H "Accept: application/vnd.github+json" repos/${{ github.repository }} || echo "{}")
          SS=$(echo "$DATA" | jq -r 'try .security_and_analysis.secret_scanning.status // empty')
          PP=$(echo "$DATA" | jq -r 'try .security_and_analysis.secret_scanning_push_protection.status // empty')
          echo "Secret scanning=${SS:-unknown}, Push protection=${PP:-unknown}"
          if [ "${SS:-}" = "enabled" ] && [ "${PP:-}" = "enabled" ]; then
            audit_log L1 PASSED "C3 ⬜ M1 L1 | SECRETS.M1.SRCS+LP" \
              "Secrets только из SM/KMS + минимальные perms (репо-флаги включены)" \
              "secret_scanning=enabled; push_protection=enabled; workflow permissions минимальны"
          else
            audit_log L1 $([ "${ENFORCEMENT}" = "block" ] && echo FAILED || echo WARN) \
              "C3 ⬜ M1 L1 | SECRETS.M1.SRCS+LP" \
              "Нужно включить Secret scanning + Push Protection" \
              "Доп. доказательства: скрин Repo → Code security and analysis"
            [ "${ENFORCEMENT}" = "block" ] && exit 1 || true
          fi

      - name: Upload audit part
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with: { name: audit-${{ github.job }}, path: ${{ env.AUDIT_PART }} }

  # C1 ART.M1 L2 — Подпись KMS (или demo OpenSSL)
  kms_sign_and_verify:
    needs: [build_and_attest, trust_store_guard]
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - name: Setup audit logger (per job)
        shell: bash
        run: |
          set -euo pipefail
          echo 'GREEN=\033[32m'   >> $GITHUB_ENV
          echo 'BLUE=\033[34m'    >> $GITHUB_ENV
          echo 'MAGENTA=\033[35m' >> $GITHUB_ENV
          echo 'RED=\033[31m'     >> $GITHUB_ENV
          echo 'RESET=\033[0m'    >> $GITHUB_ENV
          echo 'ICON_M1=⬜'        >> $GITHUB_ENV
          echo 'ICON_M2=⚪'        >> $GITHUB_ENV
          PART="$RUNNER_TEMP/audit-${GITHUB_JOB}.json"; echo "AUDIT_PART=$PART" >> $GITHUB_ENV
          printf '{"items":[]}\n' > "$PART"
          cat > /usr/local/bin/audit_log <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          LEVEL="$1"; STATUS="$2"; CODE="$3"; TITLE="$4"; EVID="${5:-}"; EXTRA="${6:-}"
          case "$LEVEL" in L1) CLR="${GREEN:-}";; L2) CLR="${BLUE:-}";; L3) CLR="${MAGENTA:-}";; *) CLR="";; esac
          [ "$STATUS" = "FAILED" ] && CLR="${RED:-}"
          echo "::group::${CODE} — ${TITLE}"
          printf "${CLR}%s [%s]  %s — %s${RESET}\n" "$LEVEL" "$STATUS" "$CODE" "$TITLE"
          [ -n "$EVID" ] && { echo "EVIDENCE:"; printf "%s\n" "$EVID"; }
          [ -n "$EXTRA" ] && { echo "NOTE: $EXTRA"; }
          echo "::endgroup::"
          FILE="${AUDIT_PART:-/tmp/audit-part.json}"; TMP=$(mktemp)
          jq --arg level "$LEVEL" --arg status "$STATUS" --arg code "$CODE" --arg title "$TITLE" --arg evid "$EVID" --arg extra "$EXTRA" \
             '.items += [{level:$level,status:$status,code:$code,title:$title,evidence:$evid,extra:$extra}]' "$FILE" > "$TMP"
          mv "$TMP" "$FILE"
          EOS
          chmod +x /usr/local/bin/audit_log

      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with: { name: build }

      - name: Configure AWS (OIDC) if KMS vars present
        if: ${{ vars.AWS_ROLE_ARN != '' && vars.AWS_REGION != '' }}
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a
        with: { role-to-assume: ${{ vars.AWS_ROLE_ARN }}, aws-region: ${{ vars.AWS_REGION }} }

      - name: KMS Sign artifact.txt (PS256) — or local OpenSSL fallback
        id: sign
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ vars.AWS_KMS_KEY_ID }}" ] && [ -n "${{ vars.AWS_REGION }}" ]; then
            aws kms sign --key-id "${{ vars.AWS_KMS_KEY_ID }}" \
              --signing-algorithm RSASSA_PSS_SHA_256 \
              --message-type RAW --message fileb://artifact.txt \
              --query Signature --output text | base64 -d > artifact.sig
            aws kms get-public-key --key-id "${{ vars.AWS_KMS_KEY_ID }}" \
              --query PublicKey --output text | base64 -d > aws-pub.der
            openssl pkey -pubin -inform DER -in aws-pub.der -out aws-pub.pem
            openssl dgst -sha256 -verify aws-pub.pem -signature artifact.sig \
              -sigopt rsa_padding_mode:pss -sigopt rsa_pss_saltlen:digest -sigopt rsa_mgf1_md:sha256 artifact.txt
            echo "mode=KMS" >> $GITHUB_OUTPUT
          else
            # Fallback demo: локальная пара ключей RSA-PSS
            openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 -out local.key
            openssl pkey -in local.key -pubout -out local.pub.pem
            openssl dgst -sha256 -sign local.key -out artifact.sig \
              -sigopt rsa_padding_mode:pss -sigopt rsa_pss_saltlen:digest -sigopt rsa_mgf1_md:sha256 artifact.txt
            openssl dgst -sha256 -verify local.pub.pem -signature artifact.sig \
              -sigopt rsa_padding_mode:pss -sigopt rsa_pss_saltlen:digest -sigopt rsa_mgf1_md:sha256 artifact.txt
            echo "mode=LOCAL" >> $GITHUB_OUTPUT
          fi

      - name: Log C1 ⬜ M1 L2 | ART.M1.KMS-SIGN
        run: |
          MODE="${{ steps.sign.outputs.mode }}"
          if [ "$MODE" = "KMS" ]; then
            SIG_HEX=$(xxd -p -c 256 artifact.sig | head -c 64 || true)
            audit_log L2 PASSED "C1 ⬜ M1 L2 | ART.M1.KMS-SIGN" \
              "Подпись RSASSA_PSS_SHA_256 сервис-ключом (KMS/HSM non-exportable)" \
              "signature(first32B)=${SIG_HEX}; key=${{ vars.AWS_KMS_KEY_ID }}"
          else
            audit_log L2 PASSED "C1 ⬜ M1 L2 | ART.M1.KMS-SIGN" \
              "Демо-подпись локальным RSA-PSS (fallback, без KMS)" \
              "Для строгого соответствия включите AWS_KMS_KEY_ID/ROLE/REGION"
          fi

      - name: Upload audit part
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with: { name: audit-${{ github.job }}, path: ${{ env.AUDIT_PART }} }

  # C2 DEPS.M2 — привязка SBOM к digest
  sbom_enforce:
    needs: [build_and_attest]
    runs-on: ubuntu-latest
    steps:
      - name: Setup audit logger (per job)
        shell: bash
        run: |
          set -euo pipefail
          echo 'GREEN=\033[32m'   >> $GITHUB_ENV
          echo 'BLUE=\033[34m'    >> $GITHUB_ENV
          echo 'MAGENTA=\033[35m' >> $GITHUB_ENV
          echo 'RED=\033[31m'     >> $GITHUB_ENV
          echo 'RESET=\033[0m'    >> $GITHUB_ENV
          echo 'ICON_M1=⬜'        >> $GITHUB_ENV
          echo 'ICON_M2=⚪'        >> $GITHUB_ENV
          PART="$RUNNER_TEMP/audit-${GITHUB_JOB}.json"; echo "AUDIT_PART=$PART" >> $GITHUB_ENV
          printf '{"items":[]}\n' > "$PART"
          cat > /usr/local/bin/audit_log <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          LEVEL="$1"; STATUS="$2"; CODE="$3"; TITLE="$4"; EVID="${5:-}"; EXTRA="${6:-}"
          case "$LEVEL" in L1) CLR="${GREEN:-}";; L2) CLR="${BLUE:-}";; L3) CLR="${MAGENTA:-}";; *) CLR="";; esac
          [ "$STATUS" = "FAILED" ] && CLR="${RED:-}"
          echo "::group::${CODE} — ${TITLE}"
          printf "${CLR}%s [%s]  %s — %s${RESET}\n" "$LEVEL" "$STATUS" "$CODE" "$TITLE"
          [ -n "$EVID" ] && { echo "EVIDENCE:"; printf "%s\n" "$EVID"; }
          [ -n "$EXTRA" ] && { echo "NOTE: $EXTRA"; }
          echo "::endgroup::"
          FILE="${AUDIT_PART:-/tmp/audit-part.json}"; TMP=$(mktemp)
          jq --arg level "$LEVEL" --arg status "$STATUS" --arg code "$CODE" --arg title "$TITLE" --arg evid "$EVID" --arg extra "$EXTRA" \
             '.items += [{level:$level,status:$status,code:$code,title:$title,evidence:$evid,extra:$extra}]' "$FILE" > "$TMP"
          mv "$TMP" "$FILE"
          EOS
          chmod +x /usr/local/bin/audit_log

      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with: { name: build }

      - name: Enforce SBOM subject digest equals artifact digest
        id: sbomcheck
        shell: bash
        run: |
          set -euo pipefail
          ART_DIGEST=$(sha256sum artifact.txt | awk '{print $1}')
          SBOM_DIGEST=$(jq -r '.files[]?|select(.fileName=="artifact.txt")|.checksums[]?|select(.algorithm=="SHA256")|.checksumValue' sbom.spdx.json | head -n1)
          echo "artifact=${ART_DIGEST} sbom=${SBOM_DIGEST}"
          if [ -z "$SBOM_DIGEST" ] || [ "$ART_DIGEST" != "$SBOM_DIGEST" ]; then
            audit_log L2 $([ "${ENFORCEMENT}" = "block" ] && echo FAILED || echo WARN) \
              "C2 ⚪ M2 L2 | DEPS.M2.SBOM-DIGEST" "SBOM привязан к digest" \
              "Mismatch or missing (artifact=$ART_DIGEST, sbom=$SBOM_DIGEST)"
            [ "${ENFORCEMENT}" = "block" ] && exit 1 || true
          else
            audit_log L2 PASSED "C2 ⚪ M2 L2 | DEPS.M2.SBOM-DIGEST" \
              "SBOM.subject.checksum(SHA256) == artifact digest" \
              "artifact=$ART_DIGEST"
          fi

      - name: Upload audit part
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with: { name: audit-${{ github.job }}, path: ${{ env.AUDIT_PART }} }

  # C9 TEST.M2 — IaC/Config scan (presence)
  iac_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Setup audit logger (per job)
        shell: bash
        run: |
          set -euo pipefail
          echo 'GREEN=\033[32m'   >> $GITHUB_ENV
          echo 'BLUE=\033[34m'    >> $GITHUB_ENV
          echo 'MAGENTA=\033[35m' >> $GITHUB_ENV
          echo 'RED=\033[31m'     >> $GITHUB_ENV
          echo 'RESET=\033[0m'    >> $GITHUB_ENV
          echo 'ICON_M1=⬜'        >> $GITHUB_ENV
          echo 'ICON_M2=⚪'        >> $GITHUB_ENV
          PART="$RUNNER_TEMP/audit-${GITHUB_JOB}.json"; echo "AUDIT_PART=$PART" >> $GITHUB_ENV
          printf '{"items":[]}\n' > "$PART"
          cat > /usr/local/bin/audit_log <<'EOS'
          #!/usr/bin/env bash
          set -euo pipefail
          LEVEL="$1"; STATUS="$2"; CODE="$3"; TITLE="$4"; EVID="${5:-}"; EXTRA="${6:-}"
          case "$LEVEL" in L1) CLR="${GREEN:-}";; L2) CLR="${BLUE:-}";; L3) CLR="${MAGENTA:-}";; *) CLR="";; esac
          [ "$STATUS" = "FAILED" ] && CLR="${RED:-}"
          echo "::group::${CODE} — ${TITLE}"
          printf "${CLR}%s [%s]  %s — %s${RESET}\n" "$LEVEL" "$STATUS" "$CODE" "$TITLE"
          [ -n "$EVID" ] && { echo "EVIDENCE:"; printf "%s\n" "$EVID"; }
          [ -n "$EXTRA" ] && { echo "NOTE: $EXTRA"; }
          echo "::endgroup::"
          FILE="${AUDIT_PART:-/tmp/audit-part.json}"; TMP=$(mktemp)
          jq --arg level "$LEVEL" --arg status "$STATUS" --arg code "$CODE" --arg title "$TITLE" --arg evid "$EVID" --arg extra "$EXTRA" \
             '.items += [{level:$level,status:$status,code:$code,title:$title,evidence:$evid,extra:$extra}]' "$FILE" > "$TMP"
          mv "$TMP" "$FILE"
          EOS
          chmod +x /usr/local/bin/audit_log

      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Install trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy --version
      - name: Run IaC/config scan (presence)
        run: |
          trivy config -q --exit-code 0 --format table .
          audit_log L1 PASSED "C9 ⬜ M1 L1 | TEST.M1.IAC-RAN" "IaC/Config scan выполнен" "Evidence: таблица выше"

      - name: Upload audit part
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with: { name: audit-${{ github.job }}, path: ${{ env.AUDIT_PART }} }

  # Продвижение в прод (только для default ветки + env approval)
  promote_to_prod:
    needs: [ build_and_attest, security_settings_guard, kms_sign_and_verify, sbom_enforce, iac_scan, verify_action_publishers ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: { name: production }
    concurrency: { group: deploy-${{ github.ref_name }}, cancel-in-progress: true }
    steps:
      - run: echo "All upstream gates passed. Waiting for env approval…"

  # Итоговая сводка по всем partial-отчётам
  audit_summary:
    needs: [ codeql, dependency_review, verify_action_publishers, build_and_attest, trust_store_guard, security_settings_guard, kms_sign_and_verify, sbom_enforce, iac_scan ]
    runs-on: ubuntu-latest
    steps:
      - name: Download all audit parts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          pattern: audit-*
          merge-multiple: true
          path: audit

      - name: Merge and print summary
        shell: bash
        run: |
          set -euo pipefail
          OUT=/tmp/audit-summary.json
          jq -s '{items: (map(.items) | add)}' audit/*.json > "$OUT"
          echo "::group::📊 SUMMARY (criteria/metric/level)"
          jq -r '
            def pad(n): tostring | . + (" " * (n - length));
            .items as $i
            | "STATUS  | CODE                                 | TITLE",
              "------- | ------------------------------------ | -----",
              ( $i[] | "\(.status|pad(7)) | \(.code|pad(36)) | \(.title)" )
          ' "$OUT"
          echo "::endgroup::"
          cp "$OUT" $GITHUB_WORKSPACE/audit-summary.json

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: audit-summary
          path: audit-summary.json
