name: Security Framework Gates

on:
  push:
    branches: [ "main", "release/*" ]
  pull_request:
    branches: [ "main", "release/*" ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  packages: read
  id-token: write
  attestations: write

env:
  ENFORCEMENT: ${{ github.ref_name == github.event.repository.default_branch && 'block' || 'warn' }}

jobs:
  # --- Static & Dependency Analysis ---
  codeql:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - uses: github/codeql-action/init@192325c86100d080feab897ff886c34abd4c83a3
        with:
          languages: python, actions
          build-mode: none
      - uses: github/codeql-action/analyze@192325c86100d080feab897ff886c34abd4c83a3

  dependency_review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Compute base/head refs for dependency review
        id: deprefs
        shell: bash
        run: |
          set -euo pipefail
          HEAD_SHA="${GITHUB_SHA}"
          BASE_SHA=""
          if [ "${GITHUB_EVENT_NAME}" = "push" ]; then
            BEFORE="$(jq -r .before "$GITHUB_EVENT_PATH")"
            if [ -n "$BEFORE" ] && [ "$BEFORE" != "0000000000000000000000000000000000000000" ]; then
              BASE_SHA="$BEFORE"
            else
              git fetch --no-tags --prune --depth=2 origin "${GITHUB_REF}"
              BASE_SHA="$(git rev-parse "${HEAD_SHA}^" 2>/dev/null || echo "")"
            fi
          else
            BASE_SHA="$(jq -r .pull_request.base.sha "$GITHUB_EVENT_PATH")"
          fi
          echo "base=$BASE_SHA" >> "$GITHUB_OUTPUT"
          echo "head=$HEAD_SHA" >> "$GITHUB_OUTPUT"
          if [ -z "$BASE_SHA" ]; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
            echo "::warning::No base SHA found (first commit). Skipping dependency review."
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi
          echo "Using base=$BASE_SHA head=$HEAD_SHA"

      - uses: actions/dependency-review-action@595b5aeba73380359d98a5e087f648dbb0edce1b
        if: steps.deprefs.outputs.skip != 'true'
        with:
          base-ref: ${{ steps.deprefs.outputs.base }}
          head-ref: ${{ steps.deprefs.outputs.head }}
          fail-on-severity: critical
        continue-on-error: ${{ env.ENFORCEMENT != 'block' }}

  # --- Verify action publishers / pinning (allow-list) ---
  verify_action_publishers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Verify action publishers (WARN)
        env:
          GH_TOKEN: ${{ github.token }}
          ALLOW_OWNERS: actions,github,dependabot,aws-actions,google-github-actions,azure
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t FILES < <(git ls-files '.github/workflows/*.yml' '.github/workflows/*.yaml' 2>/dev/null)
          status=0
          IFS=',' read -r -a ALLOWED <<< "${ALLOW_OWNERS}"
          is_allowed(){ local o="$1"; for a in "${ALLOWED[@]}"; do [ "$o" = "$a" ] && return 0; done; return 1; }
          for f in "${FILES[@]}"; do
            while read -r owner repo ref; do
              if ! is_allowed "$owner"; then
                echo "::warning file=$f::Owner '$owner' не в allow-list"
                status=1
              fi
              if ! [[ "$ref" =~ ^[0-9a-f]{40}$ ]]; then
                echo "::warning file=$f::'$owner/$repo@$ref' не закреплён на полный commit SHA"
                status=1
              fi
              data=$(gh api "repos/$owner/$repo" -H "Accept: application/vnd.github+json" || true)
              verified=$(jq -r 'try .owner.is_verified // false' <<<"$data")
              if [ "$verified" != "true" ] && ! is_allowed "$owner"; then
                echo "::warning file=$f::Издатель '$owner' не verified"
                status=1
              fi
            done < <(yq -r '..|.uses? | select(type=="string")' "$f" | awk -F'[@/]' '{if (NF>=3) printf "%s %s %s\n",$1,$2,$NF}')
          done
          if [ $status -ne 0 ] && [ "${ENFORCEMENT}" = "block" ]; then
            echo "::error::Проверка издателей/пиннинга не прошла (ENFORCEMENT=block)."
            exit 1
          fi

  # --- Build + SBOM + Attestation ---
  build_and_attest:
    needs: [ codeql, dependency_review, verify_action_publishers ]
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Build artifact
        run: |
          echo "hello $(date -u +%FT%TZ)" > artifact.txt
          sha256sum artifact.txt | tee checksums.txt

      - name: Export SBOM (GitHub API or Syft)
        id: sbom
        run: |
          set -euo pipefail
          gh api repos/${{ github.repository }}/dependency-graph/sbom -f ref=${{ github.sha }} \
            | jq '.sbom | fromjson' > sbom.spdx.json || \
          (curl -sSfL https://get.anchore.io/syft | sh -s -- -b /usr/local/bin && \
           syft dir:. -o spdx-json=sbom.spdx.json)

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: build
          path: |
            artifact.txt
            checksums.txt
            sbom.spdx.json

      - name: Attest provenance
        if: github.event_name == 'push'
        uses: actions/attest-build-provenance@ef244123eb79f2f7a7e75d99086184180e6d0018
        with:
          subject-path: artifact.txt

      - name: Attest SBOM
        if: github.event_name == 'push'
        uses: actions/attest-sbom@5026d3663739160db546203eeaffa6aa1c51a4d6
        with:
          subject-path: artifact.txt
          sbom-path: sbom.spdx.json

      - name: Verify attestations
        if: github.event_name == 'push'
        run: |
          set -euo pipefail
          WF_NOREF="${GITHUB_WORKFLOW_REF%@*}"
          for i in $(seq 1 6); do
            if gh attestation verify artifact.txt \
                  --repo "${{ github.repository }}" \
                  --predicate-type "https://slsa.dev/provenance/v1" \
                  --cert-oidc-issuer "https://token.actions.githubusercontent.com" \
                  --signer-workflow "$WF_NOREF" \
                  --deny-self-hosted-runners \
                  --limit 50 ; then
              echo "✓ Attestation verified"
              exit 0
            fi
            sleep 10
          done
          if [ "${ENFORCEMENT}" = "block" ]; then
            exit 1
          else
            echo "::warning::Attestation verification failed"
          fi

  # --- Trust-store guard (JWKS) ---
  trust_store_guard:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Validate JWKS exists and matches AWS_KMS_KEY_ID
        env:
          AWS_KMS_KEY_ID: ${{ vars.AWS_KMS_KEY_ID }}
        run: |
          set -euo pipefail
          test -f .github/trust/publishers.jwks.json || { echo "JWKS missing"; exit 1; }
          jq -e '.keys|length>0' .github/trust/publishers.jwks.json >/dev/null
          if [ -n "${AWS_KMS_KEY_ID:-}" ]; then
            KID_EXPECT="AWS:${AWS_KMS_KEY_ID}"
            if ! jq -r '.keys[].kid' .github/trust/publishers.jwks.json | grep -Fx "$KID_EXPECT" >/dev/null; then
              echo "::warning::JWKS kid mismatch (expected $KID_EXPECT)"
              [ "${ENFORCEMENT}" = "block" ] && exit 1 || true
            fi
          fi

  # --- Secrets / Repo Security Flags ---
  security_settings_guard:
    runs-on: ubuntu-latest
    steps:
      # Получаем приватный ключ GitHub App из AWS Secrets Manager (не из GitHub Secrets)
      - name: Configure AWS for GH App secret
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Fetch GH App key from AWS Secrets Manager
        id: fetch_appkey
        shell: bash
        run: |
          set -euo pipefail
          umask 077
          aws secretsmanager get-secret-value \
            --secret-id ci/github/app-private-key \
            --query SecretString --output text > app.pem

      - name: Get GitHub App installation token (no external action)
        id: app_token
        env:
          APP_ID: ${{ secrets.GHAPP_ID }}
          API_URL: ${{ github.api_url }}
          REPO: ${{ github.repository }}
        shell: bash
        run: |
          set -euo pipefail
          b64url() { openssl base64 -A | tr '+/' '-_' | tr -d '='; }
          NOW=$(date +%s); EXP=$((NOW+540))
          HDR=$(printf '{"alg":"RS256","typ":"JWT"}' | b64url)
          PAY=$(printf '{"iat":%s,"exp":%s,"iss":"%s"}' "$NOW" "$EXP" "$APP_ID" | b64url)
          SIGN_INPUT="${HDR}.${PAY}"
          SIG=$(printf %s "$SIGN_INPUT" | openssl dgst -sha256 -sign app.pem -binary | b64url)
          JWT="${SIGN_INPUT}.${SIG}"
          API="${API_URL:-https://api.github.com}"
          INST_JSON=$(curl -fsSL -H "Authorization: Bearer ${JWT}" -H "Accept: application/vnd.github+json" \
            "${API}/repos/${REPO}/installation")
          INST_ID=$(jq -r '.id' <<<"$INST_JSON")
          TOKEN_JSON=$(curl -fsSL -X POST -H "Authorization: Bearer ${JWT}" -H "Accept: application/vnd.github+json" \
            "${API}/app/installations/${INST_ID}/access_tokens")
          TOKEN=$(jq -r '.token' <<<"$TOKEN_JSON")
          echo "GH_TOKEN=${TOKEN}" >> "$GITHUB_ENV"
          shred -u app.pem || rm -f app.pem

      - name: Check repo security flags
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          DATA=$(gh api -H "Accept: application/vnd.github+json" repos/${{ github.repository }})
          SEC=$(echo "$DATA" | jq -r '.security_and_analysis')
          SS=$(echo "$SEC" | jq -r 'try .secret_scanning.status // empty')
          PP=$(echo "$SEC" | jq -r 'try .secret_scanning_push_protection.status // empty')
          echo "Secret scanning: ${SS:-unknown}, Push protection: ${PP:-unknown}"
          if [ -z "${SS:-}" ] || [ -z "${PP:-}" ]; then
            echo "::error::security_and_analysis недоступно. Проверь, что App установлен и фичи включены."
            exit 1
          fi
          if [ "$SS" != "enabled" ] || [ "$PP" != "enabled" ]; then
            echo "::error::Enable Secret scanning + Push Protection."
            exit 1
          fi

  # --- KMS sign + verify (OIDC→AWS) ---
  kms_sign_and_verify:
    needs: [ build_and_attest, trust_store_guard ]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Download build artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: build
      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: KMS Sign artifact.txt (PS256)
        run: |
          set -euo pipefail
          aws kms sign \
            --key-id "${{ vars.AWS_KMS_KEY_ID }}" \
            --signing-algorithm RSASSA_PSS_SHA_256 \
            --message-type RAW \
            --message fileb://artifact.txt \
            --query Signature --output text | base64 -d > artifact.sig
      - name: Fetch public key and verify with OpenSSL (PSS)
        run: |
          set -euo pipefail
          aws kms get-public-key --key-id "${{ vars.AWS_KMS_KEY_ID }}" \
            --query PublicKey --output text | base64 -d > aws-pub.der
          openssl pkey -pubin -inform DER -in aws-pub.der -out aws-pub.pem
          openssl dgst -sha256 \
            -verify aws-pub.pem -signature artifact.sig \
            -sigopt rsa_padding_mode:pss -sigopt rsa_pss_saltlen:digest -sigopt rsa_mgf1_md:sha256 \
            artifact.txt

  # --- SBOM ↔ artifact digest ENFORCE ---
  sbom_enforce:
    needs: [ build_and_attest ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: build
      - name: Enforce SBOM subject digest equals artifact digest
        shell: bash
        run: |
          set -euo pipefail
          ART_DIGEST=$(sha256sum artifact.txt | awk '{print $1}')
          SBOM_DIGEST=$(jq -r '.artifacts//.packages//[]? | select(.SPDXID=="SPDXRef-Root"|not) | .checksums[]? | select(.algorithm=="SHA256") | .checksumValue' sbom.spdx.json | head -n1 || true)
          if [ -z "$SBOM_DIGEST" ] || [ "$ART_DIGEST" != "$SBOM_DIGEST" ]; then
            echo "::warning::SBOM digest mismatch or missing (artifact=$ART_DIGEST, sbom=$SBOM_DIGEST)"
            [ "${ENFORCEMENT}" = "block" ] && exit 1 || true
          else
            echo "SBOM digest matches."
          fi

  # --- IaC / Config scan (presence-gate) ---
  iac_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Install trivy (config scan)
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y wget
          wget -qO- https://github.com/aquasecurity/trivy/releases/latest/download/trivy_Linux-64bit.tar.gz | tar xz
          sudo mv trivy /usr/local/bin/
      - name: Run IaC/config scan (WARN)
        run: |
          set -euo pipefail
          # Сканим репозиторий на IaC мисконфиги. Нефатально при warn.
          trivy config --quiet --exit-code 0 --format table --no-progress . | tee iac_report.txt
          echo "IaC scan completed"
      - name: Upload IaC report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: iac-report
          path: iac_report.txt

  # --- Promote to Production ---
  promote_to_prod:
    needs: [ build_and_attest, security_settings_guard, kms_sign_and_verify, sbom_enforce, iac_scan, verify_action_publishers ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: production
    concurrency:
      group: deploy-${{ github.ref_name }}
      cancel-in-progress: true
    steps:
      - run: echo "All upstream gates passed. Waiting for env approval…"
