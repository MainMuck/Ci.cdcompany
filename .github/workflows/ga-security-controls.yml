name: Security Framework Gates

on:
  push:
    branches: [ "main", "release/*" ]
  pull_request:
    branches: [ "main", "release/*" ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  packages: read
  id-token: write
  attestations: write

env:
  ENFORCEMENT: ${{ github.ref_name == github.event.repository.default_branch && 'block' || 'warn' }}

jobs:
  # --- Static & Dependency Analysis ---
  codeql:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: python, actions
          build-mode: none
      - uses: github/codeql-action/analyze@v3

  dependency_review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: critical
        continue-on-error: ${{ env.ENFORCEMENT != 'block' }}

  # --- Build + SBOM + Attestation ---
  build_and_attest:
    needs: [ codeql, dependency_review ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build artifact
        run: |
          echo "hello $(date -u +%FT%TZ)" > artifact.txt
          sha256sum artifact.txt | tee checksums.txt

      - name: Export SBOM (GitHub API or Syft)
        id: sbom
        run: |
          set -euo pipefail
          gh api repos/${{ github.repository }}/dependency-graph/sbom -f ref=${{ github.sha }} \
            | jq '.sbom | fromjson' > sbom.spdx.json || \
          (curl -sSfL https://get.anchore.io/syft | sh -s -- -b /usr/local/bin && \
           syft dir:. -o spdx-json=sbom.spdx.json)

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: |
            artifact.txt
            checksums.txt
            sbom.spdx.json

      - name: Attest provenance
        if: github.event_name == 'push'
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: artifact.txt

      - name: Attest SBOM
        if: github.event_name == 'push'
        uses: actions/attest-sbom@v1
        with:
          subject-path: artifact.txt
          sbom-path: sbom.spdx.json

      - name: Verify attestations
        if: github.event_name == 'push'
        run: |
          set -euo pipefail
          WF_NOREF="${GITHUB_WORKFLOW_REF%@*}"
          for i in $(seq 1 6); do
            if gh attestation verify \
                  --repo "${{ github.repository }}" \
                  --subject-path artifact.txt \
                  --predicate-type "https://slsa.dev/provenance/v1" \
                  --signer-workflow "$WF_NOREF" \
                  --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
                  --deny-self-hosted-runners \
                  --limit 50 ; then
              echo "✓ Attestation verified"
              exit 0
            fi
            sleep 10
          done
          if [ "${ENFORCEMENT}" = "block" ]; then
            exit 1
          else
            echo "::warning::Attestation verification failed"
          fi

  # --- Trust-store guard (JWKS present + sane) ---
  trust_store_guard:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: ".github/trust/publishers.jwks.json"
      - name: Validate JWKS exists and matches AWS_KMS_KEY_ID
        run: |
          set -euo pipefail
          test -f .github/trust/publishers.jwks.json || { echo "::error::JWKS missing"; exit 1; }
          jq -e '.keys|length>0' .github/trust/publishers.jwks.json >/dev/null
          if [ -n "${{ vars.AWS_KMS_KEY_ID }}" ]; then
            KID_EXPECT="AWS:${{ vars.AWS_KMS_KEY_ID }}"
            if ! jq -r '.keys[].kid' .github/trust/publishers.jwks.json | grep -Fx "$KID_EXPECT" >/dev/null; then
              echo "::warning::JWKS kid mismatch (expected $KID_EXPECT)"
              [ "${ENFORCEMENT}" = "block" ] && exit 1 || true
            fi
          fi
          echo "JWKS OK"

  # --- Repo Security flags (Secrets scanning, Push protection) ---
  security_settings_guard:
    runs-on: ubuntu-latest
    steps:
      - run: |
          DATA=$(gh api repos/${{ github.repository }})
          SEC=$(echo "$DATA" | jq -r '.security_and_analysis')
          SS=$(echo "$SEC" | jq -r '.secret_scanning.status')
          PP=$(echo "$SEC" | jq -r '.secret_scanning_push_protection.status')
          echo "Secret scanning: $SS, Push protection: $PP"
          if [ "$SS" != "enabled" ] || [ "$PP" != "enabled" ]; then
            if [ "${ENFORCEMENT}" = "block" ]; then
              exit 1
            else
              echo "::warning::Enable Secret scanning + Push protection"
            fi
          fi

  # --- KMS sign + verify against tenant trust-store (JWKS) ---
  kms_sign_and_verify:
    needs: [ build_and_attest, trust_store_guard ]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: build_out

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Compute SHA256 digest (binary)
        working-directory: build_out
        run: |
          set -euo pipefail
          sha256sum artifact.txt | awk '{print $1}' | xxd -r -p > artifact.sha256.bin

      - name: KMS Sign digest (RSASSA_PSS_SHA_256)
        working-directory: build_out
        run: |
          set -euo pipefail
          aws kms sign \
            --key-id "${{ vars.AWS_KMS_KEY_ID }}" \
            --message-type DIGEST \
            --signing-algorithm RSASSA_PSS_SHA_256 \
            --message fileb://artifact.sha256.bin \
            --output json > sig.json
          jq -r .Signature sig.json | base64 -d > sig.bin

      - name: Build PEM from JWKS (kid == AWS:${{ vars.AWS_KMS_KEY_ID }})
        run: |
          python3 - <<'PY'
          import json,base64,sys
          from cryptography.hazmat.primitives.asymmetric import rsa
          from cryptography.hazmat.primitives import serialization
          exp_kid = "AWS:" + "${{ vars.AWS_KMS_KEY_ID }}"
          jwks = json.load(open(".github/trust/publishers.jwks.json"))
          key = next((k for k in jwks["keys"] if k.get("kid")==exp_kid), None)
          if not key:
            print(f"::error::kid {exp_kid} not found in JWKS", file=sys.stderr); sys.exit(1)
          def b64u_decode(s):
            s += "=" * (-len(s)%4)
            return base64.urlsafe_b64decode(s.encode())
          n = int.from_bytes(b64u_decode(key["n"]), "big")
          e = int.from_bytes(b64u_decode(key["e"]), "big")
          pub = rsa.RSAPublicNumbers(e, n).public_key()
          pem = pub.public_bytes(serialization.Encoding.PEM,
                                 serialization.PublicFormat.SubjectPublicKeyInfo)
          open("trust_pub.pem","wb").write(pem)
          print("PEM ready")
          PY

      - name: Verify signature with OpenSSL (RSA-PSS SHA256) using JWKS key
        working-directory: build_out
        run: |
          set -e
          openssl pkeyutl -verify -pubin -inkey ../trust_pub.pem \
            -pkeyopt digest:sha256 -pkeyopt rsa_padding_mode:pss -pkeyopt rsa_pss_saltlen:-1 \
            -in artifact.sha256.bin -sigfile sig.bin

      - name: Enforcement on verify
        if: failure()
        run: |
          if [ "${ENFORCEMENT}" = "block" ]; then
            echo "::error::KMS verify failed against tenant trust-store"; exit 1
          else
            echo "::warning::KMS verify failed against tenant trust-store"; exit 0
          fi

  # --- Promote to Production ---
  promote_to_prod:
    needs: [ build_and_attest, security_settings_guard, trust_store_guard, kms_sign_and_verify ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: production
    concurrency:
      group: deploy-${{ github.ref_name }}
      cancel-in-progress: true
    steps:
      - run: echo "All upstream gates passed. Waiting for env approval…"
