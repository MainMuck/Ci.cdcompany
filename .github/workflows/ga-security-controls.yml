name: Security Framework Gates

on:
  push:
    branches: ["main", "release/*"]
    tags: ["v*"]
  pull_request:
    branches: ["main", "release/*"]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  packages: read
  id-token: write
  attestations: write

env:
  ENFORCEMENT: warn
  CAN_ATTEST: ${{ (github.event_name == 'push') || (github.event_name == 'workflow_dispatch') || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}

jobs:
  # ---------- SAST / SCA ----------
  codeql:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - uses: github/codeql-action/init@192325c86100d080feab897ff886c34abd4c83a3
        with: { languages: "actions, javascript, python" }
      - uses: github/codeql-action/analyze@192325c86100d080feab897ff886c34abd4c83a3

  dependency_review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Compute base/head refs
        id: deprefs
        shell: bash
        run: |
          set -euo pipefail
          HEAD_SHA="${GITHUB_SHA}"
          if [ "${GITHUB_EVENT_NAME}" = "push" ]; then
            BEFORE="$(jq -r .before "$GITHUB_EVENT_PATH")"
            if [ -n "$BEFORE" ] && [ "$BEFORE" != "0000000000000000000000000000000000000000" ]; then
              echo "base=$BEFORE" >> "$GITHUB_OUTPUT"
            else
              git fetch --no-tags --prune --depth=2 origin "${GITHUB_REF}"
              echo "base=$(git rev-parse "${HEAD_SHA}^" 2>/dev/null || echo '')" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "base=$(jq -r .pull_request.base.sha "$GITHUB_EVENT_PATH")" >> "$GITHUB_OUTPUT"
          fi
      - uses: actions/dependency-review-action@595b5aeba73380359d98a5e087f648dbb0edce1b
        if: steps.deprefs.outputs.base != ''
        with:
          base-ref: ${{ steps.deprefs.outputs.base }}
          head-ref: ${{ github.sha }}
          fail-on-severity: critical
        continue-on-error: true

  # ---------- Verify action publishers ----------
  verify_action_publishers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Verify publishers + pin to commit (WARN only)
        env:
          GH_TOKEN: ${{ github.token }}
          ALLOW_OWNERS: actions|github|aws-actions|google-github-actions|dependabot|azure
          YQ_VER: ${{ vars.YQ_VERSION }}
          YQ_SHA512: ${{ vars.YQ_SHA512 }}
        shell: bash
        run: |
          set -euo pipefail
          YQ_VERSION="${YQ_VER:-v4.44.3}"
          if [ -n "${YQ_SHA512:-}" ]; then
            sudo curl -fsSL -L -o /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
            echo "${YQ_SHA512}  /usr/local/bin/yq" | sha512sum -c -
            sudo chmod +x /usr/local/bin/yq
          else
            sudo curl -fsSL -o /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
            sudo chmod +x /usr/local/bin/yq
            echo "::warning::YQ_SHA512 repo variable not set — checksum not verified"
          fi

          status=0
          mapfile -t WF < <(git ls-files '.github/workflows/*.y*ml' 2>/dev/null || true)
          for f in "${WF[@]}"; do
            while read -r line; do
              u="${line#uses: }"
              owner=$(echo "$u" | awk -F'[/:@]' '{print $1}')
              sha=$(echo "$u" | awk -F'@' '{print $2}')
              if ! [[ "$owner" =~ ^(${ALLOW_OWNERS})$ ]]; then
                echo "::error file=$f::owner '$owner' is not allowed"; status=1
              fi
              if ! [[ "$sha" =~ ^[0-9a-f]{40}$ ]]; then
                echo "::error file=$f::'$u' is NOT pinned to full SHA"; status=1
              fi
            done < <(yq -r '.. | .uses? | select(type=="string") | "uses: "+.' "$f")
          done
          [ $status -eq 0 ] || { echo "::warning::violations found (WARN mode)"; exit 0; }

  # ---------- Build + SBOM + Attest ----------
  build_and_attest:
    needs: [codeql, dependency_review, verify_action_publishers]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      attestations: write
      id-token: write
    env:
      GH_TOKEN: ${{ github.token }}
      SYFT_VER: ${{ vars.SYFT_VERSION }}
      SYFT_TGZ_SHA256: ${{ vars.SYFT_TGZ_SHA256 }}
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Build artifact
        run: |
          echo "hello $(date -u +%FT%TZ)" > artifact.txt
          sha256sum artifact.txt | tee checksums.txt
      - name: Export SBOM (Syft)
        shell: bash
        run: |
          set -euo pipefail
          VER="${SYFT_VER:-v1.33.0}"
          curl -fsSL -o syft.tgz "https://github.com/anchore/syft/releases/download/${VER}/syft_${VER#v}_linux_amd64.tar.gz" || \
          curl -fsSL -o syft.tgz "https://github.com/anchore/syft/releases/download/${VER}/syft_Linux_x86_64.tar.gz"
          if [ -n "${SYFT_TGZ_SHA256:-}" ]; then
            echo "${SYFT_TGZ_SHA256}  syft.tgz" | sha256sum -c -
          else
            echo "::warning::SYFT_TGZ_SHA256 not set — checksum not verified"
          fi
          tar -xzf syft.tgz syft && sudo install -m0755 syft /usr/local/bin/syft
          syft "file:artifact.txt" -o spdx-json=sbom.spdx.json
          D=$(sha256sum artifact.txt | awk '{print $1}')
          jq --arg d "$D" '.files=((.files // [])|map(select(.fileName!="artifact.txt")))+
             [{"fileName":"artifact.txt","SPDXID":"SPDXRef-File-artifact.txt","checksums":[{"algorithm":"SHA256","checksumValue":$d}]}]' \
             sbom.spdx.json > t && mv t sbom.spdx.json
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: build
          path: |
            artifact.txt
            checksums.txt
            sbom.spdx.json

  # ---------- Trust-store guard ----------
  access_recert_gate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Block if any group recert is expired
        shell: bash
        run: |
          set -euo pipefail
          test -f .github/trust/access_catalog.json || { echo "::error::missing .github/trust/access_catalog.json"; exit 1; }
          NOW=$(date -u +%F)
          EXPIRED=$(jq -r --arg NOW "$NOW" '.groups[] | select(.recert_expires_at < $NOW) | .name' .github/trust/access_catalog.json)
          if [ -n "$EXPIRED" ]; then
            echo "::error::Access recert expired for groups:"; echo "$EXPIRED" | sed 's/^/- /'
            exit 1
          fi
          echo "Access recert OK as of $NOW"

  trust_store_guard:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Load org trust-store (if set)
        id: t
        shell: bash
        env:
          ORG_TRUST_REPO: ${{ vars.ORG_TRUST_REPO }}
          GH_TOKEN: ${{ secrets.ORG_READ_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p .github/trust
          if [ -n "${ORG_TRUST_REPO:-}" ]; then
            gh repo clone "$ORG_TRUST_REPO" _orgtrust -- -q || true
            if [ -f _orgtrust/.github/trust/publishers.jwks.json ]; then
              cp -r _orgtrust/.github/trust/* .github/trust/ || true
              echo "source=org" >> "$GITHUB_OUTPUT"
            else
              echo "source=local" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "source=local" >> "$GITHUB_OUTPUT"
          fi
      - name: Validate trust-store files
        env:
          AWS_KMS_KEY_ID: ${{ vars.AWS_KMS_KEY_ID }}
        run: |
          set -euo pipefail
          test -f .github/trust/publishers.jwks.json || { echo "::error::JWKS missing"; exit 1; }
          jq -e '.keys|length>0' .github/trust/publishers.jwks.json >/dev/null
          test -f .github/trust/allowed_signers.json || { echo "::error::allowed_signers.json missing"; exit 1; }
          test -f .github/trust/revocations.json || { echo '{"kids":[]}' > .github/trust/revocations.json; }

  # ---------- KMS sign (optional) ----------
  kms_sign_and_verify:
    needs: [build_and_attest, trust_store_guard]
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions: { id-token: write, contents: read }
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Decide if AWS steps are allowed for this ref
        id: gate
        shell: bash
        run: |
          case "${GITHUB_REF}" in
            refs/heads/main|refs/heads/release/*|refs/tags/v*) echo "aws=yes"  >> "$GITHUB_OUTPUT" ;;
            *)                                               echo "aws=no"   >> "$GITHUB_OUTPUT" ;;
          esac
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with: { name: build }
      - name: Configure AWS (OIDC)
        if: steps.gate.outputs.aws == 'yes'
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-duration-seconds: 900
          audience: sts.amazonaws.com
          role-session-name: gha-${{ github.run_id }}-${{ github.run_attempt }}
      - name: KMS Sign artifact.txt (PS256)
        if: steps.gate.outputs.aws == 'yes'
        run: |
          set -euo pipefail
          aws kms sign --key-id "${{ vars.AWS_KMS_KEY_ID }}" \
            --signing-algorithm RSASSA_PSS_SHA_256 --message-type RAW \
            --message fileb://artifact.txt --query Signature --output text | base64 -d > artifact.sig
      - name: Fetch public key & verify
        if: steps.gate.outputs.aws == 'yes'
        run: |
          set -euo pipefail
          aws kms get-public-key --key-id "${{ vars.AWS_KMS_KEY_ID }}" \
            --query PublicKey --output text | base64 -d > aws-pub.der
          openssl pkey -pubin -inform DER -in aws-pub.der -out aws-pub.pem
          openssl dgst -sha256 -verify aws-pub.pem -signature artifact.sig \
            -sigopt rsa_padding_mode:pss -sigopt rsa_pss_saltlen:digest -sigopt rsa_mgf1_md:sha256 artifact.txt

  # ---------- SBOM enforce ----------
  sbom_enforce:
    needs: [build_and_attest]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with: { name: build }
      - name: Enforce SBOM digest (WARN only)
        shell: bash
        run: |
          set -euo pipefail
          A=$(sha256sum artifact.txt | awk '{print $1}')
          S=$(jq -r '.files[]?|select(.fileName=="artifact.txt")|.checksums[]?|select(.algorithm=="SHA256")|.checksumValue' sbom.spdx.json | head -n1)
          [ -n "$S" ] && [ "$A" = "$S" ] && echo "SBOM OK" || echo "::warning::SBOM mismatch/missing"

  # ---------- Secrets presence ----------
  secrets_presence_gate:
    needs: [build_and_attest]
    runs-on: ubuntu-latest
    permissions: { contents: read }
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Scan repo & workflows for secrets (heuristic)
        id: repo_scan
        shell: bash
        run: |
          set -euo pipefail
          PATTERN='AKIA|ASIA|ghp_[A-Za-z0-9]{36,}|github_pat_[A-Za-z0-9_]{82,}|xox[abrs]-|BEGIN (RSA |OPENSSH )?PRIVATE KEY|SECRET_ACCESS_KEY|token=|password='
          found=0
          grep -RInE "$PATTERN" -- . --exclude-dir=.git || true
          [ ${PIPESTATUS[0]} -eq 0 ] && found=1
          if [ -d .github/workflows ]; then
            grep -RInE "$PATTERN" -- .github/workflows --exclude-dir=.git || true
            [ ${PIPESTATUS[0]} -eq 0 ] && found=1
          fi
          echo "found=$found" >> "$GITHUB_OUTPUT"

  # ---------- Presence/baseline ----------
  presence_gate:
    needs: [codeql, dependency_review, secrets_presence_gate]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    permissions:
      contents: read
      pull-requests: read
      security-events: read
    steps:
      - name: Require SAST/SCA/Secrets to have RUN (skip ⇒ WARN)
        shell: bash
        run: |
          set -euo pipefail
          echo "SAST=${{ needs.codeql.result }}  SCA=${{ needs.dependency_review.result }}  SECRETS=${{ needs.secrets_presence_gate.result }}"
          exit 0

  # ---------- Reports ----------
  collect_security_reports:
    needs: [presence_gate]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    permissions:
      contents: read
      security-events: read
      pull-requests: read
    steps:
      - name: Gather reports
        env: { GH_TOKEN: ${{ github.token }} }
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p _reports
          repo="${GITHUB_REPOSITORY}"
          gh api repos/$repo/code-scanning/alerts --paginate > _reports/codeql_alerts.json || echo '[]' > _reports/codeql_alerts.json
          gh api repos/$repo/dependabot/alerts --paginate > _reports/dependabot_alerts.json || echo '[]' > _reports/dependabot_alerts.json
          jq -n --arg SAST "${{ needs.codeql.result }}" --arg SCA "${{ needs.dependency_review.result }}" --arg SECR "${{ needs.secrets_presence_gate.result }}" '{sast:$SAST, sca:$SCA, secrets:$SECR}' > _reports/presence.json
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: security-reports
          path: _reports/*

  # ---------- Release protection & attach ----------
  release_protection:
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Block if release already exists for this tag
        env: { GH_TOKEN: ${{ github.token }} }
        run: |
          set -euo pipefail
          tag="${GITHUB_REF#refs/tags/}"
          if gh release view "$tag" >/dev/null 2>&1; then
            echo "::error::Release ${tag} already exists"; exit 1
          fi
          echo "No existing release for ${tag} -> OK"

  attach_security_reports:
    needs: [collect_security_reports, release_protection]
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-latest
    permissions: { contents: write, security-events: read }
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with: { name: security-reports, path: reports, overwrite: true }
      - name: Upload reports to Release
        env: { GH_TOKEN: ${{ github.token }} }
        shell: bash
        run: |
          set -euo pipefail
          tag="${GITHUB_REF#refs/tags/}"
          gh release view "$tag" >/dev/null 2>&1 || gh release create "$tag" -t "$tag" -n "Automated release"
          ls -l reports || true
          gh release upload "$tag" reports/* --clobber || true

  # ---------- Prod release gate (no cycles) ----------
  prod_release_gate:
    needs: [access_recert_gate, build_and_attest, trust_store_guard, kms_sign_and_verify, sbom_enforce, verify_action_publishers]
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Load org trust-store
        if: ${{ vars.ORG_TRUST_REPO != '' }}
        env:
          ORG_TRUST_REPO: ${{ vars.ORG_TRUST_REPO }}
          GH_TOKEN: ${{ secrets.ORG_READ_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p .github/trust
          gh repo clone "$ORG_TRUST_REPO" _orgtrust -- -q || true
          test -d _orgtrust/.github/trust && cp -r _orgtrust/.github/trust/* .github/trust/ || true
      - name: Enforce release-only refs
        shell: bash
        run: |
          set -euo pipefail
          case "${GITHUB_REF}" in refs/heads/main|refs/heads/release/*|refs/tags/v*) ;; *)
            echo "::error::Deploy allowed only from main/release/*/v*"; exit 1;; esac
      - name: Check key revocations
        run: |
          set -euo pipefail
          test -f .github/trust/revocations.json || { echo "no revocations.json -> OK"; exit 0; }
          KID="AWS:${{ vars.AWS_KMS_KEY_ID }}"
          jq -r '.kids[]?' .github/trust/revocations.json | grep -Fx "$KID" && { echo "::error::Key revoked ($KID)"; exit 1; } || echo "KID not revoked"
      - name: Enforce signer present in JWKS
        env: { KID: AWS:${{ vars.AWS_KMS_KEY_ID }} }
        run: |
          set -euo pipefail
          test -f .github/trust/publishers.jwks.json || { echo "::error::missing .github/trust/publishers.jwks.json"; exit 1; }
          jq -e --arg k "$KID" '.keys[]?|.kid==$k' .github/trust/publishers.jwks.json >/dev/null || { echo "::error::unknown signer $KID"; exit 1; }
      - name: Verify OIDC claims + allowed_signers
        run: |
          set -euo pipefail
          tok=$(curl -sS -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=sts.amazonaws.com" | jq -r .value)
          test -n "$tok"
          body=$(echo "$tok" | awk -F. '{print $2}' | base64 -d 2>/dev/null)
          repo=$(jq -r .repository <<<"$body")
          ref=$(jq -r .ref <<<"$body")
          wf=$(jq -r .job_workflow_ref <<<"$body")
          [ "$repo" = "${GITHUB_REPOSITORY}" ] || { echo "::error::OIDC repo mismatch"; exit 1; }
          echo "$ref" | grep -Eq '^refs/(heads/(main|release/.*)|tags/v.*)$' || { echo "::error::OIDC ref not allowed"; exit 1; }
          jq -r '.[]?' .github/trust/allowed_signers.json | grep -Fx "$wf" >/dev/null || { echo "::error::workflow not in allowed_signers"; exit 1; }

  # ---------- Promotion / Rollback (NO cycles) ----------
  promote_to_prod:
    needs: [prod_release_gate]
    runs-on: ubuntu-latest
    environment: { name: production }
    concurrency:
      group: deploy-${{ github.ref_name }}
      cancel-in-progress: true
    steps:
      - run: echo "All upstream gates passed. Waiting for env approval…"

  rollback_to_prod:
    needs: [prod_release_gate, access_recert_gate]
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    environment: { name: production }
    steps:
      - run: echo "Manual rollback to production requested. Waiting for environment approval..."

  # ---------- Admin ops ----------
  secrets_kms_admin:
    needs: [access_recert_gate]
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    environment: { name: admin-ops }
    steps:
      - run: echo "Admin operation on secrets/KMS. Waiting for environment approval..."

  rbac_admin:
    needs: [access_recert_gate]
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    environment: { name: admin-ops }
    steps:
      - run: echo "Admin operation on RBAC/permissions. Waiting for environment approval..."

  trust_runners_admin:
    needs: [access_recert_gate]
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    environment: { name: admin-ops }
    steps:
      - run: echo "Admin operation on trusted/registration runners. Waiting for environment approval..."

  # ---------- Trust-store auto-rotation ----------
  trust_store_rotate:
    if: ${{ github.event_name == 'schedule' && vars.ORG_TRUST_REPO != '' }}
    runs-on: ubuntu-latest
    permissions: { contents: write, pull-requests: write }
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Pull org trust-store
        env:
          ORG_TRUST_REPO: ${{ vars.ORG_TRUST_REPO }}
          GH_TOKEN: ${{ secrets.ORG_READ_TOKEN }}
        run: |
          set -euo pipefail
          rm -rf _orgtrust
          gh repo clone "$ORG_TRUST_REPO" _orgtrust -- -q
          test -d _orgtrust/.github/trust || { echo "no .github/trust in $ORG_TRUST_REPO"; exit 0; }
          mkdir -p .github/trust
          cp -a _orgtrust/.github/trust/. .github/trust/
      - name: Detect changes
        id: diff
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          BR="chore/rotate-trust-store-$(date -u +%Y%m%d%H%M%S)"
          git checkout -b "$BR"
          git add .github/trust
          if git diff --cached --quiet; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            git commit -m "chore(trust-store): sync from ${{ vars.ORG_TRUST_REPO }}"
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "branch=$BR" >> "$GITHUB_OUTPUT"
          fi
      - name: Open PR
        if: steps.diff.outputs.changed == 'true'
        env: { GH_TOKEN: ${{ github.token }} }
        run: |
          set -euo pipefail
          gh pr create --title "chore(trust-store): sync org trust-store" \
                       --body "Automated sync of .github/trust from \`${{ vars.ORG_TRUST_REPO }}\`" \
                       --base "main" || true
